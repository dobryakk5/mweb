// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –ø—Ä—è–º–æ –≤ –∫–æ–¥ (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
process.env.DATABASE_URL = "postgresql://mwww:ploked@217.114.15.233:5432/realty?search_path=users"

import cron from 'node-cron'
import { db, ads } from '@acme/db'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ URL
function getSourceFromUrl(url: string): 'cian' | 'avito' | 'yandex' | 'unknown' {
  const lowerUrl = url.toLowerCase()
  if (lowerUrl.includes('cian.ru')) return 'cian'
  if (lowerUrl.includes('avito.ru')) return 'avito'
  if (lowerUrl.includes('realty.yandex.ru')) return 'yandex'
  return 'unknown'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Python API
async function parseViewsFromUrl(url: string): Promise<{ viewsToday?: number, status?: boolean }> {
  console.log(`üîç Parsing views and status from: ${url}`)
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python API –ø–∞—Ä—Å–µ—Ä
    const response = await fetch(`http://localhost:8008/api/parse/single?url=${encodeURIComponent(url)}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    if (!response.ok) {
      console.warn(`‚ö†Ô∏è Parser API error for ${url}: ${response.status}`)
      return {
        viewsToday: undefined, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
        status: undefined,     // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
      }
    }

    const propertyData = await response.json()
    console.log(`üìä Parsed data for ${url}:`, propertyData)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞
    let viewsToday: number | undefined = undefined
    let status: boolean | undefined = undefined
    
    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
    if (propertyData.views_today !== undefined && propertyData.views_today !== null) {
      viewsToday = Number(propertyData.views_today)
    } else if (propertyData.viewsToday !== undefined && propertyData.viewsToday !== null) {
      viewsToday = Number(propertyData.viewsToday)
    }
    
    // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (propertyData.is_active !== undefined && propertyData.is_active !== null) {
      status = Boolean(propertyData.is_active)
    } else if (propertyData.isActive !== undefined && propertyData.isActive !== null) {
      status = Boolean(propertyData.isActive)
    } else if (propertyData.status !== undefined && propertyData.status !== null) {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const statusStr = String(propertyData.status).toLowerCase()
      status = statusStr === 'active' || statusStr === '–∞–∫—Ç–∏–≤–Ω–æ' || statusStr === 'true'
    }
    
    return {
      viewsToday: viewsToday,
      status: status,
    }
    
  } catch (error) {
    console.error(`‚ùå Error parsing ${url}:`, error)
    return {
      viewsToday: undefined, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
      status: undefined,     // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
async function sendDailyUpdate(
  adId: number,
  newData: { viewsToday?: number, status?: boolean }
) {
  try {
    const response = await fetch('http://localhost:13001/scheduler/daily-update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        adId: adId,
        viewsToday: newData.viewsToday,
        status: newData.status,
      }),
    })

    if (!response.ok) {
      throw new Error(`API responded with status ${response.status}`)
    }

    const result = await response.json()
    console.log(`üìä Ad ${adId}: daily update sent successfully, changes: ${result.changes}`)
    return result
  } catch (error) {
    console.error(`‚ùå Failed to send daily update for ad ${adId}:`, error)
    throw error
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
async function performDailyTracking() {
  console.log('üïö Starting daily views tracking at 23:00...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–¥–µ–ª–∞–µ–º –ø–æ URL
    const allAds = await db.select().from(ads)
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const adsToTrack = allAds.filter(ad => {
      const source = getSourceFromUrl(ad.url)
      return source === 'cian' || // –í—Å–µ CIAN
             (ad.sma === 1 && (source === 'avito' || source === 'yandex')) // –¢–æ–ª—å–∫–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–ª—è Avito/Yandex
    })
    
    console.log(`üìã Found ${adsToTrack.length} ads to track out of ${allAds.length} total`)
    
    for (const ad of adsToTrack) {
      try {
        const source = getSourceFromUrl(ad.url)
        console.log(`üîÑ Processing ad ${ad.id} from ${source}...`)
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å
        const currentData = await parseViewsFromUrl(ad.url)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API (API —Å–∞–º –∑–∞–ø–∏—à–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É)
        await sendDailyUpdate(ad.id, currentData)
        
        console.log(`‚úÖ Ad ${ad.id} updated successfully`)
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç—ã
        await new Promise(resolve => setTimeout(resolve, 2000))
        
      } catch (error) {
        console.error(`‚ùå Failed to track views for ad ${ad.id}:`, error)
      }
    }
    
    console.log('üéâ Daily views tracking completed!')
    
  } catch (error) {
    console.error('üí• Error in daily tracking:', error)
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
cron.schedule('0 23 * * *', async () => {
  await performDailyTracking()
}, {
  timezone: 'Europe/Moscow' // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
})

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
// cron.schedule('* * * * *', async () => {
//   console.log('üß™ Test run...')
//   await performDailyTracking()
// })

console.log('üìÖ Daily views tracking scheduler started')
console.log('‚è∞ Scheduled to run every day at 23:00 Moscow time')

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
// if (process.env.NODE_ENV === 'development') {
//   console.log('üß™ Running test tracking in 5 seconds...')
//   setTimeout(async () => {
//     await performDailyTracking()
//   }, 5000)
// }

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --force
if (process.argv.includes('--force')) {
  console.log('üöÄ Force running scheduler...')
  performDailyTracking().then(() => {
    console.log('‚úÖ Force run completed')
    process.exit(0)
  }).catch(error => {
    console.error('‚ùå Force run failed:', error)
    process.exit(1)
  })
}