import cron from 'node-cron'
import { db, ads } from '@acme/db'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ URL
function getSourceFromUrl(url: string): 'cian' | 'avito' | 'yandex' | 'unknown' {
  const lowerUrl = url.toLowerCase()
  if (lowerUrl.includes('cian.ru')) return 'cian'
  if (lowerUrl.includes('avito.ru')) return 'avito'
  if (lowerUrl.includes('realty.yandex.ru')) return 'yandex'
  return 'unknown'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
async function parseViewsFromUrl(url: string): Promise<{ viewsToday?: number, totalViews?: number, status?: string }> {
  console.log(`üîç Parsing views and status from: ${url}`)
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
  // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  const statuses = ['active', 'inactive', 'sold', 'archived']
  return {
    viewsToday: Math.floor(Math.random() * 50), // –ó–∞–≥–ª—É—à–∫–∞
    totalViews: Math.floor(Math.random() * 1000) + 500, // –ó–∞–≥–ª—É—à–∫–∞
    status: statuses[Math.floor(Math.random() * statuses.length)], // –ó–∞–≥–ª—É—à–∫–∞
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
async function sendDailyUpdate(
  adId: number,
  newData: { viewsToday?: number, totalViews?: number, status?: string }
) {
  try {
    const response = await fetch('http://localhost:13001/scheduler/daily-update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        adId: adId,
        viewsToday: newData.viewsToday,
        totalViews: newData.totalViews,
        status: newData.status,
      }),
    })

    if (!response.ok) {
      throw new Error(`API responded with status ${response.status}`)
    }

    const result = await response.json()
    console.log(`üìä Ad ${adId}: daily update sent successfully, changes: ${result.changes}`)
    return result
  } catch (error) {
    console.error(`‚ùå Failed to send daily update for ad ${adId}:`, error)
    throw error
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
async function performDailyTracking() {
  console.log('üïö Starting daily views tracking at 23:00...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–¥–µ–ª–∞–µ–º –ø–æ URL
    const allAds = await db.select().from(ads)
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const adsToTrack = allAds.filter(ad => {
      const source = getSourceFromUrl(ad.url)
      return source === 'cian' || // –í—Å–µ CIAN
             (ad.sma === 1 && (source === 'avito' || source === 'yandex')) // –¢–æ–ª—å–∫–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–ª—è Avito/Yandex
    })
    
    console.log(`üìã Found ${adsToTrack.length} ads to track out of ${allAds.length} total`)
    
    for (const ad of adsToTrack) {
      try {
        const source = getSourceFromUrl(ad.url)
        console.log(`üîÑ Processing ad ${ad.id} from ${source}...`)
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å
        const currentData = await parseViewsFromUrl(ad.url)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API (API —Å–∞–º –∑–∞–ø–∏—à–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É)
        await sendDailyUpdate(ad.id, currentData)
        
        console.log(`‚úÖ Ad ${ad.id} updated successfully`)
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç—ã
        await new Promise(resolve => setTimeout(resolve, 2000))
        
      } catch (error) {
        console.error(`‚ùå Failed to track views for ad ${ad.id}:`, error)
      }
    }
    
    console.log('üéâ Daily views tracking completed!')
    
  } catch (error) {
    console.error('üí• Error in daily tracking:', error)
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
cron.schedule('0 23 * * *', async () => {
  await performDailyTracking()
}, {
  timezone: 'Europe/Moscow' // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
})

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
// cron.schedule('* * * * *', async () => {
//   console.log('üß™ Test run...')
//   await performDailyTracking()
// })

console.log('üìÖ Daily views tracking scheduler started')
console.log('‚è∞ Scheduled to run every day at 23:00 Moscow time')

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (process.env.NODE_ENV === 'development') {
  console.log('üß™ Running test tracking in 5 seconds...')
  setTimeout(async () => {
    await performDailyTracking()
  }, 5000)
}