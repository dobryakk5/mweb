'use client'

import React, { useState, useEffect } from 'react'
import {
  useMapCache,
  type MapFilters,
  type MapBounds,
} from '@/hooks/use-map-cache'

interface MapFilterDemoProps {
  bounds: MapBounds
  onDataChange?: (data: { houses: any[]; ads: any[] }) => void
}

export const MapFilterDemo: React.FC<MapFilterDemoProps> = ({
  bounds,
  onDataChange,
}) => {
  const { getFilteredData, getCacheInfo, invalidateCache, loading } =
    useMapCache()
  const [filters, setFilters] = useState<MapFilters>({
    rooms: 2,
    maxPrice: 10000000,
    minArea: 50,
    minKitchenArea: 8,
  })

  const [data, setData] = useState<{ houses: any[]; ads: any[] } | null>(null)
  const cacheInfo = getCacheInfo()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ bounds –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const loadData = async () => {
      const result = await getFilteredData(bounds, filters)
      if (result) {
        setData(result)
        onDataChange?.(result)
      }
    }

    loadData()
  }, [bounds, filters, getFilteredData, onDataChange])

  const handleFilterChange = (
    key: keyof MapFilters,
    value: number | undefined,
  ) => {
    setFilters((prev) => ({ ...prev, [key]: value }))
  }

  return (
    <div className='p-4 bg-white rounded-lg shadow'>
      <h3 className='text-lg font-semibold mb-4'>
        –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ä—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      </h3>

      {/* –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ */}
      <div className='mb-4 p-2 bg-gray-100 rounded text-sm'>
        {cacheInfo.hasCache ? (
          <div className='text-green-600'>
            ‚úÖ –ö—ç—à –∞–∫—Ç–∏–≤–µ–Ω: {cacheInfo.adsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π,{' '}
            {cacheInfo.housesCount} –¥–æ–º–æ–≤
            <br />
            –í–æ–∑—Ä–∞—Å—Ç: {Math.round(cacheInfo.age / 1000)} —Å–µ–∫—É–Ω–¥
          </div>
        ) : (
          <div className='text-gray-500'>üì¶ –ö—ç—à –ø—É—Å—Ç</div>
        )}

        {loading && <div className='text-blue-600 mt-1'>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</div>}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className='grid grid-cols-2 gap-4 mb-4'>
        <div>
          <label className='block text-sm font-medium mb-1'>–ö–æ–º–Ω–∞—Ç –æ—Ç:</label>
          <input
            type='number'
            value={filters.rooms || ''}
            onChange={(e) =>
              handleFilterChange('rooms', Number(e.target.value) || undefined)
            }
            className='w-full px-3 py-2 border rounded-md'
            min='1'
            max='10'
          />
        </div>

        <div>
          <label className='block text-sm font-medium mb-1'>
            –¶–µ–Ω–∞ –¥–æ (–º–ª–Ω ‚ÇΩ):
          </label>
          <input
            type='number'
            value={
              filters.maxPrice ? Math.round(filters.maxPrice / 1000000) : ''
            }
            onChange={(e) =>
              handleFilterChange(
                'maxPrice',
                Number(e.target.value) * 1000000 || undefined,
              )
            }
            className='w-full px-3 py-2 border rounded-md'
            min='1'
            max='100'
          />
        </div>

        <div>
          <label className='block text-sm font-medium mb-1'>
            –ü–ª–æ—â–∞–¥—å –æ—Ç (–º¬≤):
          </label>
          <input
            type='number'
            value={filters.minArea || ''}
            onChange={(e) =>
              handleFilterChange('minArea', Number(e.target.value) || undefined)
            }
            className='w-full px-3 py-2 border rounded-md'
            min='20'
            max='300'
          />
        </div>

        <div>
          <label className='block text-sm font-medium mb-1'>
            –ö—É—Ö–Ω—è –æ—Ç (–º¬≤):
          </label>
          <input
            type='number'
            value={filters.minKitchenArea || ''}
            onChange={(e) =>
              handleFilterChange(
                'minKitchenArea',
                Number(e.target.value) || undefined,
              )
            }
            className='w-full px-3 py-2 border rounded-md'
            min='5'
            max='50'
          />
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {data && (
        <div className='space-y-2 text-sm'>
          <div className='text-gray-600'>
            üè† –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–æ–≤: {data.houses.length}
          </div>
          <div className='text-gray-600'>üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {data.ads.length}</div>
          <div className='text-green-600'>
            üü† –î–æ–º–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏:{' '}
            {data.houses.filter((h) => h.has_active_ads).length}
          </div>
          <div className='text-gray-500'>
            ‚ö™ –î–æ–º–æ–≤ —Ç–æ–ª—å–∫–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏:{' '}
            {data.houses.filter((h) => !h.has_active_ads).length}
          </div>
        </div>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className='mt-4 flex gap-2'>
        <button
          onClick={invalidateCache}
          className='px-3 py-1 bg-red-100 text-red-600 rounded hover:bg-red-200 transition-colors text-sm'
          disabled={!cacheInfo.hasCache}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
        </button>

        <button
          onClick={() =>
            setFilters({
              rooms: 3,
              maxPrice: 20000000,
              minArea: 60,
              minKitchenArea: 10,
            })
          }
          className='px-3 py-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 transition-colors text-sm'
        >
          üè† –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
        </button>
      </div>
    </div>
  )
}
