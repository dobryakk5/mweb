'use client'

import { useState } from 'react'
import { buttonVariants } from '@acme/ui/components/button'
import { toast } from 'sonner'

interface TelegramUser {
  id: string
  tgUserId: number
  firstName?: string
  lastName?: string
  username?: string
}

export default function NotificationsPage() {
  const [isCheckingFlats, setIsCheckingFlats] = useState(false)
  const [isCheckingHouses, setIsCheckingHouses] = useState(false)
  const [isCheckingNearby, setIsCheckingNearby] = useState(false)
  const [days, setDays] = useState(1)

  const handleCheckFlats = async () => {
    const userData = localStorage.getItem('telegram_user')
    if (!userData) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
      return
    }

    const user: TelegramUser = JSON.parse(userData)
    setIsCheckingFlats(true)

    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:13001'
      const response = await fetch(`${apiUrl}/scheduler/check-flat-changes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          tgUserId: user.tgUserId,
          checkType: 'flats',
          days,
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to check flats')
      }

      const result = await response.json()
      const totalChanges =
        (result.totalNewAdsFlat || 0) + (result.totalStatusChangesFlat || 0)

      if (totalChanges === 0) {
        toast.info('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞')
      } else {
        toast.success(
          `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
            `üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.totalNewAdsFlat || 0}\n` +
            `üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: ${result.totalStatusChangesFlat || 0}\n` +
            `üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.notificationsSent || 0}`,
        )
      }
    } catch (error) {
      console.error('Error checking flats:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º')
    } finally {
      setIsCheckingFlats(false)
    }
  }

  const handleCheckHouses = async () => {
    const userData = localStorage.getItem('telegram_user')
    if (!userData) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
      return
    }

    const user: TelegramUser = JSON.parse(userData)
    setIsCheckingHouses(true)

    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:13001'
      const response = await fetch(`${apiUrl}/scheduler/check-flat-changes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          tgUserId: user.tgUserId,
          checkType: 'houses',
          days,
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to check houses')
      }

      const result = await response.json()
      const totalChanges =
        (result.totalNewAdsHouse || 0) + (result.totalStatusChangesHouse || 0)

      if (totalChanges === 0) {
        toast.info('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –¥–æ–º–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞')
      } else {
        toast.success(
          `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
            `üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.totalNewAdsHouse || 0}\n` +
            `üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: ${result.totalStatusChangesHouse || 0}\n` +
            `üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.notificationsSent || 0}`,
        )
      }
    } catch (error) {
      console.error('Error checking houses:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –¥–æ–º–∞–º')
    } finally {
      setIsCheckingHouses(false)
    }
  }

  const handleCheckNearby = async () => {
    const userData = localStorage.getItem('telegram_user')
    if (!userData) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
      return
    }

    const user: TelegramUser = JSON.parse(userData)
    setIsCheckingNearby(true)

    try {
      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:13001'
      const response = await fetch(`${apiUrl}/scheduler/check-nearby-changes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ tgUserId: user.tgUserId, days }),
      })

      if (!response.ok) {
        throw new Error('Failed to check nearby ads')
      }

      const result = await response.json()
      const totalChanges =
        (result.totalNewAds || 0) + (result.totalStatusChanges || 0)

      if (totalChanges === 0) {
        toast.info('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 500–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞')
      } else {
        toast.success(
          `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ 500–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
            `üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.totalNewAds || 0}\n` +
            `üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: ${result.totalStatusChanges || 0}\n` +
            `üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.notificationsSent || 0}`,
        )
      }
    } catch (error) {
      console.error('Error checking nearby ads:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 500–º')
    } finally {
      setIsCheckingNearby(false)
    }
  }

  return (
    <div className='container mx-auto p-6 max-w-4xl'>
      <h1 className='text-3xl font-bold mb-6'>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>

      <div className='bg-card rounded-lg shadow p-6 mb-6'>
        <h2 className='text-xl font-semibold mb-4'>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π</h2>
        <p className='text-muted-foreground mb-6'>
          –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –∏
          –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç
          –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.
        </p>

        <div className='flex flex-col items-center gap-3'>
          <button
            type='button'
            className={buttonVariants({
              variant: 'default',
              size: 'lg',
              className: 'w-full max-w-md',
            })}
            onClick={handleCheckFlats}
            disabled={isCheckingFlats}
          >
            {isCheckingFlats ? '–ü—Ä–æ–≤–µ—Ä—è—é...' : 'üè† –ü–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º'}
          </button>

          <button
            type='button'
            className={buttonVariants({
              variant: 'default',
              size: 'lg',
              className: 'w-full max-w-md',
            })}
            onClick={handleCheckHouses}
            disabled={isCheckingHouses}
          >
            {isCheckingHouses ? '–ü—Ä–æ–≤–µ—Ä—è—é...' : 'üè¢ –ü–æ –¥–æ–º–∞–º'}
          </button>

          <button
            type='button'
            className={buttonVariants({
              variant: 'default',
              size: 'lg',
              className: 'w-full max-w-md',
            })}
            onClick={handleCheckNearby}
            disabled={isCheckingNearby}
          >
            {isCheckingNearby ? '–ü—Ä–æ–≤–µ—Ä—è—é...' : 'üó∫Ô∏è –í —Ä–∞–¥–∏—É—Å–µ 500–º'}
          </button>
        </div>

        {/* –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ */}
        <div className='flex justify-center items-center gap-2 mt-4 text-sm text-muted-foreground'>
          <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ:</span>
          <input
            type='number'
            min='1'
            max='30'
            value={days}
            onChange={(e) =>
              setDays(Math.max(1, Math.min(30, parseInt(e.target.value) || 1)))
            }
            className='w-16 px-2 py-1 border border-input rounded-md bg-background text-foreground'
          />
          <span>{days === 1 ? '–¥–µ–Ω—å' : days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}</span>
        </div>
      </div>

      <div className='bg-muted/50 rounded-lg p-4'>
        <h3 className='text-sm font-semibold mb-2'>‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h3>
        <ul className='text-sm text-muted-foreground space-y-1'>
          <li>
            ‚Ä¢ <strong>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º:</strong> –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º (–ø–æ —ç—Ç–∞–∂—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç)
          </li>
          <li>
            ‚Ä¢ <strong>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –¥–æ–º–∞–º:</strong> –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            –≤ –¥–æ–º–∞—Ö, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–∞—à–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
          </li>
          <li>
            ‚Ä¢ <strong>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 500–º:</strong> –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è
            –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –¥–æ–º–∞—Ö –≤ —Ä–∞–¥–∏—É—Å–µ 500–º –æ—Ç –≤–∞—à–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä (–¥–µ—à–µ–≤–ª–µ,
            –±–æ–ª—å—à–µ –∫–æ–º–Ω–∞—Ç, –ø–ª–æ—â–∞–¥—å ‚â•90%)
          </li>
          <li>
            ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞
            –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
          </li>
          <li>
            ‚Ä¢ Scheduler –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
          </li>
        </ul>
      </div>
    </div>
  )
}
