import { useState, useEffect, useCallback, useMemo } from 'react'
import { useDebounce } from '../../../../../../hooks/use-debounce'

interface MapBounds {
  north: number
  south: number
  east: number
  west: number
}

interface FlatFilters {
  rooms: number
  maxPrice: number
  minArea?: number
  minKitchenArea?: number
}

interface AdData {
  price: number
  lat: number
  lng: number
  rooms: number
  area?: number
  kitchen_area?: number
  floor: number
  total_floors?: number
  house_id: number
  url: string
  updated_at: string
  distance_m: number
  is_active: boolean | number // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0/1 –∏–ª–∏ true/false
}

interface UseMapAdsFilterOptions {
  flatFilters: FlatFilters
  enabled?: boolean
  debounceMs?: number
  selectedHouseId?: number | null
}

interface UseMapAdsFilterReturn {
  ads: AdData[]
  mapAds: AdData[] // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã (–≤—Å–µ–≥–¥–∞ –≤—Å–µ –¥–æ–º–∞ –≤ –æ–±–ª–∞—Å—Ç–∏)
  loading: boolean
  error: string | null
  bounds: MapBounds | null
  setBounds: (bounds: MapBounds | null) => void
  refetch: () => void
  adsCount: number
  selectedHouseId: number | null
  setSelectedHouseId: (houseId: number | null) => void
  updateAdsStatuses: () => Promise<void>
  isUpdatingStatuses: boolean
  cachedAdsCount: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–µ—à–µ
}

export const useMapAdsFilter = ({
  flatFilters,
  enabled = true,
  debounceMs = 300,
  selectedHouseId = null,
}: UseMapAdsFilterOptions): UseMapAdsFilterReturn => {
  const [bounds, setBounds] = useState<MapBounds | null>(null)
  const [ads, setAds] = useState<AdData[]>([]) // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–ª—è preview)
  const [cachedAds, setCachedAds] = useState<AdData[]>([]) // –ö–ï–® –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [currentSelectedHouseId, setCurrentSelectedHouseId] = useState<
    number | null
  >(selectedHouseId)
  const [isUpdatingStatuses, setIsUpdatingStatuses] = useState(false)

  // Debounce bounds changes to avoid too many API calls
  const debouncedBounds = useDebounce(bounds, debounceMs)

  // Debounce house selection to avoid multiple requests
  const debouncedSelectedHouseId = useDebounce(currentSelectedHouseId, 100)

  // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ (–¥–ª—è –∫–µ—à–∞)
  const cacheApiUrl = useMemo(() => {
    if (!enabled || !debouncedBounds) return null

    const params = new URLSearchParams({
      north: debouncedBounds.north.toString(),
      south: debouncedBounds.south.toString(),
      east: debouncedBounds.east.toString(),
      west: debouncedBounds.west.toString(),
      rooms: flatFilters.rooms.toString(),
      maxPrice: flatFilters.maxPrice.toString(),
      limit: '500', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∫–µ—à–∞
    })

    if (flatFilters.minArea) {
      params.append('minArea', flatFilters.minArea.toString())
    }

    if (flatFilters.minKitchenArea) {
      params.append('minKitchenArea', flatFilters.minKitchenArea.toString())
    }

    return `${process.env.NEXT_PUBLIC_API_URL}/map/ads?${params}`
  }, [debouncedBounds, flatFilters, enabled])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∫–µ—à—É (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ preview)
  const applyFiltersToCache = useCallback(
    (houseId?: number | null): AdData[] => {
      let filtered = cachedAds

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–æ–º - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ house_id
      if (houseId) {
        filtered = filtered.filter((ad) => ad.house_id === houseId)
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      filtered = filtered.filter((ad) => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        if (ad.rooms < flatFilters.rooms) return false

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if (ad.price >= flatFilters.maxPrice) return false

        // –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏
        if (flatFilters.minArea && ad.area && ad.area < flatFilters.minArea)
          return false

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ö–Ω–µ (–≤–∫–ª—é—á–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è)
        if (
          flatFilters.minKitchenArea &&
          ad.kitchen_area &&
          ad.kitchen_area < flatFilters.minKitchenArea
        )
          return false

        return true
      })

      return filtered
    },
    [cachedAds, flatFilters],
  )

  // mapAds - –≤—Å–µ–≥–¥–∞ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞ (–¥–ª—è –∫–∞—Ä—Ç—ã)
  const mapAds = useMemo(() => {
    return applyFiltersToCache() // –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–æ–º—É
  }, [applyFiltersToCache])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–µ—à
  const fetchAndCacheAds = useCallback(async () => {
    if (!cacheApiUrl) return

    setLoading(true)
    setError(null)

    try {
      if (process.env.NODE_ENV === 'development') {
        const timestamp = new Date().toISOString().slice(11, 23)
        console.log(
          `üóÇÔ∏è [${timestamp}] CACHE_LOAD - Fetching all ads for bounds:`,
          cacheApiUrl,
        )
      }

      const response = await fetch(cacheApiUrl)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      const responseAds = data.ads || []
      setCachedAds(responseAds)

      if (process.env.NODE_ENV === 'development') {
        const timestamp = new Date().toISOString().slice(11, 23)
        console.log(
          `‚úÖ [${timestamp}] CACHE_LOADED - ${responseAds.length} ads cached`,
        )
      }
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'Unknown error occurred'
      setError(errorMessage)
      console.error('Error fetching and caching ads:', err)
    } finally {
      setLoading(false)
    }
  }, [cacheApiUrl])

  // Refetch function for manual refresh
  const refetch = useCallback(() => {
    fetchAndCacheAds()
  }, [fetchAndCacheAds])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ bounds (–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã)
  useEffect(() => {
    if (cacheApiUrl) {
      fetchAndCacheAds().then(() => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        setTimeout(() => {
          updateAdsStatuses()
        }, 500)
      })
    } else {
      setCachedAds([])
      setError(null)
    }
  }, [cacheApiUrl])

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–º–∞
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      const timestamp = new Date().toISOString().slice(11, 23)
      if (debouncedSelectedHouseId) {
        console.log(
          `üè† [${timestamp}] HOUSE_FILTER - Filtering cache for house ${debouncedSelectedHouseId}`,
        )
      } else {
        console.log(
          `üó∫Ô∏è [${timestamp}] BOUNDS_FILTER - Showing all ads in bounds`,
        )
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–µ—à –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–º–∞
    const filteredAds = applyFiltersToCache(debouncedSelectedHouseId)
    setAds(filteredAds)

    if (process.env.NODE_ENV === 'development') {
      const timestamp = new Date().toISOString().slice(11, 23)
      console.log(
        `üìä [${timestamp}] FILTERED - Showing ${filteredAds.length} ads from cache of ${cachedAds.length}`,
      )
    }
  }, [debouncedSelectedHouseId, applyFiltersToCache, cachedAds.length])

  // Clear data when disabled
  useEffect(() => {
    if (!enabled) {
      setAds([])
      setCachedAds([])
      setError(null)
      setLoading(false)
    }
  }, [enabled])

  // Function to update ads statuses via Python API
  const updateAdsStatuses = useCallback(async () => {
    if (!debouncedBounds || isUpdatingStatuses) return

    setIsUpdatingStatuses(true)
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/map/update-ads-statuses`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            north: debouncedBounds.north,
            south: debouncedBounds.south,
            east: debouncedBounds.east,
            west: debouncedBounds.west,
            rooms: Number(flatFilters.rooms),
            maxPrice: Number(flatFilters.maxPrice),
            minArea: flatFilters.minArea
              ? Number(flatFilters.minArea)
              : undefined,
            minKitchenArea: flatFilters.minKitchenArea
              ? Number(flatFilters.minKitchenArea)
              : undefined,
          }),
        },
      )

      if (response.ok) {
        const result = await response.json()
        console.log('Ads status update result:', result)

        // Refetch cache to get updated statuses
        fetchAndCacheAds()
      }
    } catch (error) {
      console.error('Error updating ads statuses:', error)
    } finally {
      setIsUpdatingStatuses(false)
    }
  }, [debouncedBounds, flatFilters, isUpdatingStatuses, fetchAndCacheAds])

  return {
    ads,
    mapAds,
    loading,
    error,
    bounds,
    setBounds,
    refetch,
    adsCount: ads.length,
    cachedAdsCount: cachedAds.length,
    selectedHouseId: currentSelectedHouseId,
    setSelectedHouseId: setCurrentSelectedHouseId,
    updateAdsStatuses,
    isUpdatingStatuses,
  }
}

export type { MapBounds, FlatFilters, AdData, UseMapAdsFilterOptions }
