'use client'

import { type HTMLAttributes, type JSX, useMemo, useEffect, useState, useCallback } from 'react'
import { useSearchParams } from 'next/navigation'
import Link from 'next/link'

import type { UserFlat } from '@acme/db/types'
import { insertUserFlatSchema } from '@acme/db/schemas'
import { type z, zodResolver } from '@acme/ui/lib/zod'
import { useForm, type SubmitHandler } from '@acme/ui/hooks/use-form'
import Form from '@acme/ui/components/form'
import cn from '@acme/ui/utils/cn'
import Page from '@acme/ui/components/page'
import Button, { buttonVariants } from '@acme/ui/components/button'
import { ArrowLeftIcon, Loader2Icon, TrashIcon, PlusIcon, MinusIcon, DownloadIcon, RefreshCwIcon, ChevronUpIcon, ChevronDownIcon } from '@acme/ui/components/icon'
import Fieldset from '@acme/ui/components/fieldset'
import Card from '@acme/ui/components/card'
import Skeleton from '@acme/ui/components/skeleton'
import Input from '@acme/ui/components/input'

import { useUpdateFlat, useDeleteFlat } from '@/domains/flats/hooks/mutations'
import { useAds, useFlatAdsFromFindAds, useBroaderAdsFromFindAds, useNearbyAdsFromFindAds, useUpdateAd, forceUpdateAd, findSimilarAds, findSimilarAdsByFlat, findBroaderAdsByAddress, createAd, createAdFromSimilar, createAdFromSimilarWithFrom, toggleAdComparison, type SimilarAd } from '@/domains/ads'
import { useDeleteAd } from '@/domains/ads/hooks/mutations'
import { useParseProperty } from '@/domains/property-parser'
import { toast } from 'sonner'
import * as XLSX from 'xlsx'
import HookFormDevtool from '@/components/hookform-devtool'
import AddAdForm from './add-ad-form'
import AdChangesHistory from '@/components/ad-changes-history'

const formSchema = insertUserFlatSchema.pick({
  address: true,
  rooms: true,
  floor: true,
})

type FormValues = z.infer<typeof formSchema>

type EditFlatFormProps = HTMLAttributes<HTMLFormElement> & {
  flat?: UserFlat
  className?: string
  isLoading?: boolean
}

export default function EditFlatForm({
  flat,
  className,
  isLoading,
  ...props
}: EditFlatFormProps): JSX.Element {
  const searchParams = useSearchParams()
  const returnTo = searchParams.get('returnTo') || '/my-flats'
  const [showAddAdForm, setShowAddAdForm] = useState(false)
  const [expandedView, setExpandedView] = useState(false)
  const [mounted, setMounted] = useState(false)
  const [similarAds, setSimilarAds] = useState<SimilarAd[]>([])
  const [isLoadingSimilar, setIsLoadingSimilar] = useState(false)
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ "–ü–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ"
  const [isUpdatingFlatCian, setIsUpdatingFlatCian] = useState(false)
  const [isUpdatingFlatAvito, setIsUpdatingFlatAvito] = useState(false)
  const [isUpdatingFlatYandex, setIsUpdatingFlatYandex] = useState(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ "–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –¥–æ–º—É"
  const [isUpdatingHouseCian, setIsUpdatingHouseCian] = useState(false)
  const [isUpdatingHouseAvito, setIsUpdatingHouseAvito] = useState(false)
  const [isUpdatingHouseYandex, setIsUpdatingHouseYandex] = useState(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞ "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä"
  const [isUpdatingComparisonCian, setIsUpdatingComparisonCian] = useState(false)
  const [isUpdatingComparisonAvito, setIsUpdatingComparisonAvito] = useState(false)
  const [isUpdatingComparisonYandex, setIsUpdatingComparisonYandex] = useState(false)

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤
  const [isBlocksCollapsed, setIsBlocksCollapsed] = useState({
    flatAds: false,      // –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ
    houseAds: false,     // –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –¥–æ–º—É
    nearbyAds: false,    // –û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 500–º
    comparison: false    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä
  })

  const toggleBlock = (blockName: keyof typeof isBlocksCollapsed) => {
    setIsBlocksCollapsed(prev => ({
      ...prev,
      [blockName]: !prev[blockName]
    }))
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (react-query)
  const { data: ads = [], refetch } = useAds({ flatId: flat?.id })
  const { mutateAsync: deleteAd } = useDeleteAd()
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ find_ads –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
  const { data: flatAdsFromFindAds = [] } = useFlatAdsFromFindAds(flat?.id || 0)
  const { data: broaderAdsFromFindAds = [] } = useBroaderAdsFromFindAds(flat?.id || 0)
  const { data: nearbyAdsFromFindAds = [], refetch: refetchNearbyAds, isLoading: isLoadingNearbyAds } = useNearbyAdsFromFindAds(flat?.id || 0)
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ "–î—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" —Ç–µ, —á—Ç–æ —É–∂–µ –ø–æ–ø–∞–ª–∏ –≤ "–ü–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ"
  const filteredBroaderAds = broaderAdsFromFindAds.filter(broaderAd => {
    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ URL —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ "–ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ"
    return !flatAdsFromFindAds.some(flatAd => flatAd.url === broaderAd.url)
  })

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º+—ç—Ç–∞–∂—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¶–∏–∞–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const groupedBroaderAds = useMemo(() => {
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º+—ç—Ç–∞–∂—É
    const groups = new Map<string, typeof filteredBroaderAds>()
    
    filteredBroaderAds.forEach(ad => {
      const key = `${ad.rooms}-${ad.floor || 'unknown'}`
      if (!groups.has(key)) {
        groups.set(key, [])
      }
      groups.get(key)!.push(ad)
    })
    
    // –ò–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¶–∏–∞–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    const result: typeof filteredBroaderAds = []
    
    groups.forEach(groupAds => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¶–∏–∞–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const cianAds = groupAds.filter(ad => ad.url.includes('cian.ru'))
      
      if (cianAds.length > 0) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞) –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
        const latestCianAd = cianAds.sort((a, b) => 
          new Date(b.updated || '').getTime() - new Date(a.updated || '').getTime()
        )[0]
        
        if (latestCianAd) {
          result.push(latestCianAd)
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¶–∏–∞–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ª—é–±–æ–µ
        const latestAd = groupAds.sort((a, b) => 
          new Date(b.updated || '').getTime() - new Date(a.updated || '').getTime()
        )[0]
        
        if (latestAd) {
          result.push(latestAd)
        }
      }
    })
    
    return result
  }, [filteredBroaderAds])

  // –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
  const flatAds = ads.filter(ad => ad.from === 1) // –ü–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ (–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
  const otherAds = ads.filter(ad => ad.from === 2) // –î—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)
  const comparisonAds = ads.filter(ad => ad.sma === 1) // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä (–æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)

  useEffect(() => {
    setMounted(true)
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
  const formatValue = (value: any, defaultText = '-') => {
    if (value === null || value === undefined || value === '') return defaultText
    if (typeof value === 'number') return value.toString()
    return value.toString()
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –±–µ–∑ –∑–Ω–∞–∫–∞ ‚ÇΩ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞)
  const formatPrice = (price: number | string | null | undefined) => {
    if (!price) return ''
    const numPrice = typeof price === 'number' ? price : parseInt(String(price))
    if (isNaN(numPrice)) return ''
    return numPrice.toLocaleString('ru-RU')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π
  const formatArea = (area: number | string | null | undefined) => {
    if (!area) return ''
    const numArea = typeof area === 'number' ? area : parseFloat(String(area))
    if (isNaN(numArea)) return ''
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return numArea % 1 === 0 ? numArea.toString() : numArea.toString()
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
  const [updatingAdIds, setUpdatingAdIds] = useState(new Set<number>())

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
  const handleRefreshSingleAd = async (ad: any) => {
    try {
      setUpdatingAdIds(prev => new Set(prev).add(ad.id))
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: ${ad.url}`)
      
      const result = await parseProperty(ad.url)
      
      if (result.success && result.data) {
        const updateData = prepareUpdateData(result.data)
        await forceUpdateAd(ad.id, updateData)
        await refetch()
        console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ${ad.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`)
        toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ${ad.id}`)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    } finally {
      setUpdatingAdIds(prev => {
        const newSet = new Set(prev)
        newSet.delete(ad.id)
        return newSet
      })
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ Excel
  const exportComparisonToExcel = () => {
    if (comparisonAds.length === 0) {
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
      return
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportData = comparisonAds.map(ad => ({
      'URL': ad.url,
      '–¶–µ–Ω–∞': formatPrice(ad.price),
      '–ö–æ–º–Ω–∞—Ç—ã': ad.rooms,
      '–û–±—â–∞—è –ø–ª.': formatArea(ad.totalArea),
      '–ñ–∏–ª–∞—è –ø–ª.': formatArea(ad.livingArea),
      '–ö—É—Ö–Ω—è –ø–ª.': formatArea(ad.kitchenArea),
      '–≠—Ç–∞–∂': ad.floor || '',
      '–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π': ad.totalFloors || '',
      '–°–∞–Ω—É–∑–µ–ª': ad.bathroom || '',
      '–ë–∞–ª–∫–æ–Ω': ad.balcony || '',
      '–†–µ–º–æ–Ω—Ç': ad.renovation || '',
      '–ú–µ–±–µ–ª—å': ad.furniture || '',
      '–ì–æ–¥': ad.constructionYear || '',
      '–¢–∏–ø –¥–æ–º–∞': ad.houseType || '',
      '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤': ad.ceilingHeight || '',
      '–ú–µ—Ç—Ä–æ': ad.metroStation || '',
      '–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ': ad.metroTime || '',
      '–¢–µ–≥–∏': ad.tags || '',
      '–û–ø–∏—Å–∞–Ω–∏–µ': ad.description || '',
      '–°—Ç–∞—Ç—É—Å': ad.status || '',
      '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –¥–∞—Ç—É': ad.viewsToday !== null && ad.viewsToday !== undefined ? ad.viewsToday : '‚Äî',
    }))

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
    const ws = XLSX.utils.json_to_sheet(exportData)
    const wb = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(wb, ws, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä')

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª
    const fileName = `—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ-–∫–≤–∞—Ä—Ç–∏—Ä-${flat?.address || '–∫–≤–∞—Ä—Ç–∏—Ä–∞'}-${new Date().toLocaleDateString('ru-RU')}.xlsx`
    XLSX.writeFile(wb, fileName)
    
    toast.success(`–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${fileName}`)
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä—Å–∏–Ω–≥–∞
  const prepareUpdateData = (parsedData: any) => {
    const updateData: any = {}
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º status - –º–æ–∂–µ—Ç –±—ã—Ç—å boolean –∏–ª–∏ undefined
    if (typeof parsedData.status === 'boolean') {
      updateData.status = parsedData.status
    } else if (parsedData.status === 'active' || parsedData.status === 'inactive') {
      updateData.status = parsedData.status === 'active'
    } else {
      updateData.status = true // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–Ω–æ
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if (typeof parsedData.price === 'number' && parsedData.price > 0) {
      updateData.price = parsedData.price
    } else if (typeof parsedData.price === 'string' && parsedData.price !== '–ù–µ –Ω–∞–π–¥–µ–Ω–æ') {
      const parsedPrice = parseInt(parsedData.price)
      if (!isNaN(parsedPrice) && parsedPrice > 0) {
        updateData.price = parsedPrice
      }
    }

    if (typeof parsedData.rooms === 'number' && parsedData.rooms > 0) {
      updateData.rooms = parsedData.rooms
    } else if (parsedData.rooms) {
      const parsedRooms = parseInt(String(parsedData.rooms))
      if (!isNaN(parsedRooms) && parsedRooms > 0) {
        updateData.rooms = parsedRooms
      }
    }

    // –ü–ª–æ—â–∞–¥–∏
    if (parsedData.total_area || parsedData.totalArea) {
      const area = parsedData.total_area || parsedData.totalArea
      updateData.totalArea = typeof area === 'number' ? area : parseFloat(String(area))
    }
    
    if (parsedData.living_area || parsedData.livingArea) {
      const area = parsedData.living_area || parsedData.livingArea
      updateData.livingArea = typeof area === 'number' ? area : parseFloat(String(area))
    }
    
    if (parsedData.kitchen_area || parsedData.kitchenArea) {
      const area = parsedData.kitchen_area || parsedData.kitchenArea
      updateData.kitchenArea = typeof area === 'number' ? area : parseFloat(String(area))
    }

    // –≠—Ç–∞–∂ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞
    if (typeof parsedData.floor === 'number' && parsedData.floor > 0) {
      updateData.floor = parsedData.floor
    } else if (parsedData.floor) {
      const parsedFloor = parseInt(String(parsedData.floor))
      if (!isNaN(parsedFloor) && parsedFloor > 0) {
        updateData.floor = parsedFloor
      }
    }

    if (typeof parsedData.total_floors === 'number' || typeof parsedData.totalFloors === 'number') {
      updateData.totalFloors = parsedData.total_floors || parsedData.totalFloors
    } else if (parsedData.total_floors || parsedData.totalFloors) {
      const floors = parsedData.total_floors || parsedData.totalFloors
      const parsedFloors = parseInt(String(floors))
      if (!isNaN(parsedFloors)) {
        updateData.totalFloors = parsedFloors
      }
    }

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    if (parsedData.bathroom) updateData.bathroom = parsedData.bathroom
    if (parsedData.balcony) updateData.balcony = parsedData.balcony
    if (parsedData.renovation) updateData.renovation = parsedData.renovation
    if (parsedData.furniture) updateData.furniture = parsedData.furniture

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–¥–∞–Ω–∏—è
    if (parsedData.construction_year || parsedData.constructionYear) {
      const year = parsedData.construction_year || parsedData.constructionYear
      updateData.constructionYear = typeof year === 'number' ? year : parseInt(String(year))
    }
    
    if (parsedData.house_type || parsedData.houseType) {
      updateData.houseType = parsedData.house_type || parsedData.houseType
    }
    
    if (parsedData.ceiling_height || parsedData.ceilingHeight) {
      const height = parsedData.ceiling_height || parsedData.ceilingHeight
      updateData.ceilingHeight = typeof height === 'number' ? height : parseFloat(String(height))
    }

    // –õ–æ–∫–∞—Ü–∏—è
    if (parsedData.metro_station || parsedData.metroStation) {
      updateData.metroStation = parsedData.metro_station || parsedData.metroStation
    }
    
    if (parsedData.metro_time || parsedData.metroTime) {
      updateData.metroTime = parsedData.metro_time || parsedData.metroTime
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (parsedData.tags) updateData.tags = parsedData.tags
    if (parsedData.description) updateData.description = parsedData.description
    if (parsedData.photo_urls || parsedData.photoUrls) {
      updateData.photoUrls = parsedData.photo_urls || parsedData.photoUrls
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (parsedData.source) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —á–∏—Å–ª–æ–≤—ã–µ –¥–ª—è API
      if (parsedData.source === 'cian') {
        updateData.source = 1
      } else if (parsedData.source === 'avito') {
        updateData.source = 2
      } else if (typeof parsedData.source === 'number') {
        updateData.source = parsedData.source
      }
    }
    
    if (parsedData.views_today || parsedData.viewsToday) {
      const views = parsedData.views_today || parsedData.viewsToday
      updateData.viewsToday = typeof views === 'number' ? views : parseInt(String(views))
    }
    

    // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
    return Object.fromEntries(
      Object.entries(updateData).filter(([_, value]) => value !== undefined && value !== null && value !== '')
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const getSourceName = (source: number) => {
    if (source === 1) return 'Cian'
    if (source === 2) return 'Avito'
    return 'Unknown'
  }

  const defaultValues = useMemo(
    () => ({
      address: flat?.address ?? '',
      rooms: flat?.rooms ?? 1,
      floor: flat?.floor ?? 1,
    }),
    [flat],
  )

  const { reset, formState, control, handleSubmit, ...form } =
    useForm<FormValues>({
      mode: 'onChange',
      defaultValues,
      resolver: zodResolver(formSchema),
    })

  useEffect(() => {
    if (flat) {
      reset(defaultValues)
    }
  }, [flat, defaultValues, reset])

  const { mutateAsync: updateFlat } = useUpdateFlat(flat?.id as number)
  const { mutateAsync: deleteFlat } = useDeleteFlat(flat?.id as number)
  const { mutateAsync: parseProperty, isPending: isParsing } = useParseProperty()
  const { mutateAsync: updateAd } = useUpdateAd()

  const cancel = () => reset(defaultValues)

  const onSubmit: SubmitHandler<FormValues> = async (values: FormValues) => {
    try {
      const modifiedFields: Partial<FormValues> = Object.fromEntries(
        Object.keys(formState.dirtyFields).map((key) => [
          key,
          values[key as keyof FormValues],
        ]),
      )

      await updateFlat(modifiedFields)

      reset(values)
    } catch (err) {
      console.error(err)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É (useCallback –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
  const autoFindBroaderAds = useCallback(async () => {
    if (!flat) return
    
    setIsLoadingSimilar(true)
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É –±–µ–∑ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–∂–∞ –∏ –∫–æ–º–Ω–∞—Ç
      const broaderAds: SimilarAd[] = await findBroaderAdsByAddress(flat.id)
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const existingUrls = new Set(ads.map(ad => ad.url))
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É ads
      let addedCount = 0
      let skippedCount = 0
      
      for (const broaderAd of broaderAds) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ URL
          if (existingUrls.has(broaderAd.url)) {
            console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å URL ${broaderAd.url} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
            skippedCount++
            continue
          }
          
          console.log(`–°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ broader search:`, {
            url: broaderAd.url,
            price: broaderAd.price,
            rooms: broaderAd.rooms,
            flatId: flat.id,
            flatAddress: flat.address
          })
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å from = 2 (–¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ "–¥—Ä—É–≥–∏–µ")
          await createAdFromSimilarWithFrom(broaderAd, flat.id, 2, flat.address)
          addedCount++
          console.log(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${broaderAd.url}`)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
          console.error('–î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', broaderAd)
        }
      }
      
      const message = skippedCount > 0 
        ? `–ù–∞–π–¥–µ–Ω–æ ${broaderAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`
        : `–ù–∞–π–¥–µ–Ω–æ ${broaderAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –≤ —Ç–∞–±–ª–∏—Ü—É`
      
      toast.success(message)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ react-query refetch
      try {
        await refetch()
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ refetch –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', err)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É')
    } finally {
      setIsLoadingSimilar(false)
    }
  }, [ads, flat, refetch])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (useCallback –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
  const autoFindSimilarAds = useCallback(async () => {
    if (!flat) return
    
    setIsLoadingSimilar(true)
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∫–≤–∞—Ä—Ç–∏—Ä—ã
      const similar: SimilarAd[] = (ads.length > 0 && ads[0]?.id)
        ? await findSimilarAds(ads[0].id)
        : await findSimilarAdsByFlat(flat.id)
      
      setSimilarAds(similar)
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const existingUrls = new Set(ads.map(ad => ad.url))
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É ads
      let addedCount = 0
      let skippedCount = 0
      
      for (const similarAd of similar) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ URL
          if (existingUrls.has(similarAd.url)) {
            console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å URL ${similarAd.url} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
            skippedCount++
            continue
          }
          
          console.log(`–°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –ø–æ—Ö–æ–∂–µ–≥–æ:`, {
            url: similarAd.url,
            price: similarAd.price,
            rooms: similarAd.rooms,
            flatId: flat.id,
            flatAddress: flat.address
          })
          
          // –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
          await createAdFromSimilar(similarAd, flat.id, flat.address)
          addedCount++
          console.log(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${similarAd.url}`)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
          console.error('–î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', similarAd)
        }
      }
      
      const message = skippedCount > 0 
        ? `–ù–∞–π–¥–µ–Ω–æ ${similar.length} –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`
        : `–ù–∞–π–¥–µ–Ω–æ ${similar.length} –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –≤ —Ç–∞–±–ª–∏—Ü—É`
      
      toast.success(message)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ react-query refetch
      // –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞/—Ñ–∏–ª—å—Ç—Ä—ã ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å queryClient.invalidateQueries
      try {
        await refetch()
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ refetch –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', err)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
    } finally {
      setIsLoadingSimilar(false)
    }
  }, [ads, flat, refetch])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const handleToggleComparison = async (adId: number, inComparison: boolean) => {
    try {
      await toggleAdComparison(adId, inComparison)
      await refetch()
      toast.success(inComparison ? '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ' : '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const handleDeleteAd = async (adId: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
      try {
        await deleteAd(adId)
        await refetch()
        toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
  const handleDeleteFlat = async () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É? –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.')) {
      try {
        await deleteFlat()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã:', error)
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
  const handleAddToComparison = async (adData: any) => {
    if (!flat) {
      toast.error('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
      const existingAd = comparisonAds.find(ad => ad.url === adData.url)
      if (existingAd) {
        toast.info('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ')
        return
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
      const adToAdd = {
        flatId: flat.id,
        url: adData.url,
        address: flat.address, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã
        price: adData.price ? parseFloat(adData.price.toString().replace(/[^\d.]/g, '')) : 0,
        rooms: adData.rooms || flat.rooms, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        from: 2, // –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
        sma: 1 // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
      await createAd(adToAdd)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await refetch()

      toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –¥–æ–º—É
  const handleUpdateHouseAds = async () => {
    if (!flat) {
      toast.error('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –¥–æ–º—É –∏–∑ groupedBroaderAds
    if (groupedBroaderAds.length === 0) {
      toast.info('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      return
    }

    console.log(`=== –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${groupedBroaderAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –¥–æ–º—É ===`)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const cianAds = groupedBroaderAds.filter(ad => ad.url.includes('cian.ru'))
    const avitoAds = groupedBroaderAds.filter(ad => ad.url.includes('avito.ru'))
    const yandexAds = groupedBroaderAds.filter(ad => ad.url.includes('yandex.ru'))
    
    console.log(`–ò—Å—Ç–æ—á–Ω–∏–∫–∏: Cian (${cianAds.length}), Avito (${avitoAds.length}), Yandex (${yandexAds.length})`)

    let totalUpdated = 0
    let totalErrors = 0

    // 1. Cian - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (cianAds.length > 0) {
      setIsUpdatingHouseCian(true)
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º ${cianAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –ø–æ –¥–æ–º—É...`)
      
      try {
        for (const houseAd of cianAds) {
          console.log(`üîÑ –ü–∞—Ä—Å–∏–º Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É: ${houseAd.url}`)
          const result = await parseProperty(houseAd.url)
          
          if (result.success && result.data) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤ ads –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const adsItem = ads.find(ad => ad.url === houseAd.url)
            if (adsItem) {
              const updateData = prepareUpdateData(result.data)
              
              await forceUpdateAd(adsItem.id, updateData)
              totalUpdated++
              console.log(`‚úÖ Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É ${adsItem.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (—Ü–µ–Ω–∞: ${updateData.price || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞'}, —Å—Ç–∞—Ç—É—Å: ${updateData.status})`)
            } else {
              console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤ ads –¥–ª—è URL: ${houseAd.url}`)
            }
          } else {
            totalErrors++
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É: ${houseAd.url}`)
          }
        }
        toast.success(`Cian (–¥–æ–º): –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated - totalErrors} –∏–∑ ${cianAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cian (–¥–æ–º):', error)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cian (–¥–æ–º)')
        totalErrors++
      } finally {
        setIsUpdatingHouseCian(false)
      }
    }

    // 2. Avito - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º  
    if (avitoAds.length > 0) {
      setIsUpdatingHouseAvito(true)
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Avito –ø–æ –¥–æ–º—É...`)
      
      try {
        for (const houseAd of avitoAds) {
          console.log(`üîÑ –ü–∞—Ä—Å–∏–º Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É: ${houseAd.url}`)
          const result = await parseProperty(houseAd.url)
          
          if (result.success && result.data) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤ ads –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const adsItem = ads.find(ad => ad.url === houseAd.url)
            if (adsItem) {
              const updateData = prepareUpdateData(result.data)
              
              await forceUpdateAd(adsItem.id, updateData)
              totalUpdated++
              console.log(`‚úÖ Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É ${adsItem.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (—Ü–µ–Ω–∞: ${updateData.price || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞'}, —Å—Ç–∞—Ç—É—Å: ${updateData.status})`)
            } else {
              console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤ ads –¥–ª—è URL: ${houseAd.url}`)
            }
          } else {
            totalErrors++
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É: ${houseAd.url}`)
          }
        }
        toast.success(`Avito (–¥–æ–º): –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated - totalErrors} –∏–∑ ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Avito (–¥–æ–º):', error)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Avito (–¥–æ–º)')
        totalErrors++
      } finally {
        setIsUpdatingHouseAvito(false)
      }
    }

    // 3. Yandex - –ø–æ–∫–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (yandexAds.length > 0) {
      setIsUpdatingHouseYandex(true)
      console.log(`‚ö†Ô∏è Yandex –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –¥–æ–º—É (${yandexAds.length}) - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`)
      setTimeout(() => {
        setIsUpdatingHouseYandex(false)
        toast.info(`Yandex (–¥–æ–º, ${yandexAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π): —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`)
      }, 1000)
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalUpdated} —É—Å–ø–µ—à–Ω–æ, ${totalErrors} –æ—à–∏–±–æ–∫ ===`)
    
    if (totalUpdated > 0) {
      toast.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –¥–æ–º—É`)
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await refetch()
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
  const handleUpdateComparisonAds = async () => {
    if (!flat) {
      toast.error('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if (comparisonAds.length === 0) {
      toast.info('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏')
      return
    }

    console.log(`=== –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${comparisonAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ===`)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const cianAds = comparisonAds.filter(ad => ad.url.includes('cian.ru'))
    const avitoAds = comparisonAds.filter(ad => ad.url.includes('avito.ru'))
    const yandexAds = comparisonAds.filter(ad => ad.url.includes('yandex.ru'))
    
    console.log(`–ò—Å—Ç–æ—á–Ω–∏–∫–∏: Cian (${cianAds.length}), Avito (${avitoAds.length}), Yandex (${yandexAds.length})`)

    let totalUpdated = 0
    let totalErrors = 0

    // 1. Cian - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (cianAds.length > 0) {
      setIsUpdatingComparisonCian(true)
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º ${cianAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏...`)
      
      try {
        for (const ad of cianAds) {
          console.log(`üîÑ –ü–∞—Ä—Å–∏–º Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: ${ad.url}`)
          const result = await parseProperty(ad.url)
          
          if (result.success && result.data) {
            const updateData = prepareUpdateData(result.data)
            
            await forceUpdateAd(ad.id, updateData)
            totalUpdated++
            console.log(`‚úÖ Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ${ad.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (—Ü–µ–Ω–∞: ${updateData.price || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞'}, —Å—Ç–∞—Ç—É—Å: ${updateData.status})`)
            
            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await refetch()
          } else {
            totalErrors++
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ${ad.id}`)
          }
        }
        toast.success(`Cian (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ): –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated - totalErrors} –∏–∑ ${cianAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cian (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ):', error)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cian (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)')
        totalErrors++
      } finally {
        setIsUpdatingComparisonCian(false)
      }
    }

    // 2. Avito - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    if (avitoAds.length > 0) {
      setIsUpdatingComparisonAvito(true)
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Avito –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏...`)
      
      try {
        for (const ad of avitoAds) {
          console.log(`üîÑ –ü–∞—Ä—Å–∏–º Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: ${ad.url}`)
          const result = await parseProperty(ad.url)
          
          if (result.success && result.data) {
            const updateData = prepareUpdateData(result.data)
            
            await forceUpdateAd(ad.id, updateData)
            totalUpdated++
            console.log(`‚úÖ Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ${ad.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (—Ü–µ–Ω–∞: ${updateData.price || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞'}, —Å—Ç–∞—Ç—É—Å: ${updateData.status})`)
            
            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await refetch()
          } else {
            totalErrors++
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ${ad.id}`)
          }
        }
        toast.success(`Avito (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ): –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated - totalErrors} –∏–∑ ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Avito (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ):', error)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Avito (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)')
        totalErrors++
      } finally {
        setIsUpdatingComparisonAvito(false)
      }
    }

    // 3. Yandex - –ø–æ–∫–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (yandexAds.length > 0) {
      setIsUpdatingComparisonYandex(true)
      console.log(`‚ö†Ô∏è Yandex –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ (${yandexAds.length}) - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`)
      setTimeout(() => {
        setIsUpdatingComparisonYandex(false)
        toast.info(`Yandex (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, ${yandexAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π): —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`)
      }, 1000)
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalUpdated} —É—Å–ø–µ—à–Ω–æ, ${totalErrors} –æ—à–∏–±–æ–∫ ===`)
    
    if (totalUpdated > 0) {
      toast.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏`)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
  const handleUpdateAllSources = async () => {
    if (!flat) {
      toast.error('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ
    const flatAdsToUpdate = flatAds

    if (flatAdsToUpdate.length === 0) {
      toast.info('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      return
    }

    console.log(`=== –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${flatAdsToUpdate.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===`)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const cianAds = flatAdsToUpdate.filter(ad => ad.url.includes('cian.ru'))
    const avitoAds = flatAdsToUpdate.filter(ad => ad.url.includes('avito.ru'))
    const yandexAds = flatAdsToUpdate.filter(ad => ad.url.includes('yandex.ru'))
    
    console.log(`–ò—Å—Ç–æ—á–Ω–∏–∫–∏: Cian (${cianAds.length}), Avito (${avitoAds.length}), Yandex (${yandexAds.length})`)

    let totalUpdated = 0
    let totalErrors = 0

    // 1. Cian - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (cianAds.length > 0) {
      setIsUpdatingFlatCian(true)
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º ${cianAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian...`)
      
      try {
        for (const ad of cianAds) {
          console.log(`üîÑ –ü–∞—Ä—Å–∏–º Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${ad.url}`)
          const result = await parseProperty(ad.url)
          
          if (result.success && result.data) {
            const updateData = prepareUpdateData(result.data)
            
            await forceUpdateAd(ad.id, updateData)
            totalUpdated++
            console.log(`‚úÖ Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${ad.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (—Ü–µ–Ω–∞: ${updateData.price || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞'}, —Å—Ç–∞—Ç—É—Å: ${updateData.status})`)
            
            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await refetch()
          } else {
            totalErrors++
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${ad.id}`)
          }
        }
        toast.success(`Cian: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated - totalErrors} –∏–∑ ${cianAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cian:', error)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cian')
        totalErrors++
      } finally {
        setIsUpdatingFlatCian(false)
      }
    }

    // 2. Avito - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    if (avitoAds.length > 0) {
      setIsUpdatingFlatAvito(true)
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Avito...`)
      
      try {
        for (const ad of avitoAds) {
          console.log(`üîÑ –ü–∞—Ä—Å–∏–º Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${ad.url}`)
          const result = await parseProperty(ad.url)
          
          if (result.success && result.data) {
            const updateData = prepareUpdateData(result.data)
            
            await forceUpdateAd(ad.id, updateData)
            totalUpdated++
            console.log(`‚úÖ Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${ad.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (—Ü–µ–Ω–∞: ${updateData.price || '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞'}, —Å—Ç–∞—Ç—É—Å: ${updateData.status})`)
            
            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await refetch()
          } else {
            totalErrors++
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${ad.id}`)
          }
        }
        toast.success(`Avito: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated - totalErrors} –∏–∑ ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Avito:', error)
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Avito')
        totalErrors++
      } finally {
        setIsUpdatingFlatAvito(false)
      }
    }

    // 3. Yandex - –ø–æ–∫–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (yandexAds.length > 0) {
      setIsUpdatingFlatYandex(true)
      console.log(`‚ö†Ô∏è  Yandex –æ–±—ä—è–≤–ª–µ–Ω–∏—è (${yandexAds.length}) - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`)
      setTimeout(() => {
        setIsUpdatingFlatYandex(false)
        toast.info(`Yandex (${yandexAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π): —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`)
      }, 1000)
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalUpdated} —É—Å–ø–µ—à–Ω–æ, ${totalErrors} –æ—à–∏–±–æ–∫ ===`)
    
    if (totalUpdated > 0) {
      toast.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`)
    }
  }

  return (
    <>
      <HookFormDevtool control={control} />

      <Form {...{ reset, formState, control, handleSubmit, ...form }}>
        <form
          className={cn('h-full w-full', className)}
          onSubmit={handleSubmit(onSubmit)}
          {...props}
        >
          <Page>
            <Page.Header>
              <Link
                className={buttonVariants({ size: 'icon', variant: 'outline' })}
                href={returnTo}
              >
                <ArrowLeftIcon className='size-5' />

                <span className='sr-only'>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</span>
              </Link>

              <div className='flex items-end gap-6 w-full'>
                <Form.Field
                  control={control}
                  name='address'
                  render={({ field }) => (
                    <Form.Item className='space-y-1 flex-1'>
                      <Form.Label className='text-sm text-muted-foreground'>–ê–¥—Ä–µ—Å</Form.Label>
                      <Form.Control>
                        <Input
                          type='text'
                          placeholder='–ê–¥—Ä–µ—Å'
                          className='h-8 text-lg font-semibold border-none focus-visible:ring-0 focus-visible:ring-offset-0'
                          {...field}
                        />
                      </Form.Control>
                      <Form.Message />
                    </Form.Item>
                  )}
                />
                <div className='flex items-end gap-4'>
                  <Form.Field
                    control={control}
                    name='rooms'
                    render={({ field }) => (
                      <Form.Item className='space-y-1'>
                        <Form.Label className='text-sm text-muted-foreground'>–ö–æ–º–Ω–∞—Ç</Form.Label>
                        <Form.Control>
                          <Input
                            type='number'
                            min={1}
                            placeholder='–ö–æ–º–Ω–∞—Ç'
                            className='h-8 w-20 text-lg font-semibold border-none focus-visible:ring-0 focus-visible:ring-offset-0'
                            {...field}
                            onChange={(e) =>
                              field.onChange(parseInt(e.target.value) || 1)
                            }
                          />
                        </Form.Control>
                        <Form.Message />
                      </Form.Item>
                    )}
                  />
                  <Form.Field
                    control={control}
                    name='floor'
                    render={({ field }) => (
                      <Form.Item className='space-y-1'>
                        <Form.Label className='text-sm text-muted-foreground'>–≠—Ç–∞–∂</Form.Label>
                        <Form.Control>
                          <Input
                            type='number'
                            min={1}
                            placeholder='–≠—Ç–∞–∂'
                            className='h-8 w-20 text-lg font-semibold border-none focus-visible:ring-0 focus-visible:ring-offset-0'
                            {...field}
                            onChange={(e) =>
                              field.onChange(parseInt(e.target.value) || 1)
                            }
                          />
                        </Form.Control>
                        <Form.Message />
                      </Form.Item>
                    )}
                  />
                  
                  {/* –ö–Ω–æ–ø–∫–∞ "–ò—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è" */}
                  <button
                    type='button'
                    className={buttonVariants({
                      variant: 'default',
                      size: 'sm',
                    })}
                    disabled={isLoadingSimilar}
                    onClick={autoFindSimilarAds}
                  >
                    {isLoadingSimilar ? '–ü–æ–∏—Å–∫...' : '–û–±—ä—è–≤–ª–µ–Ω–∏—è'}
                  </button>

                  {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã */}
                  <button
                    type='button'
                    className={buttonVariants({
                      variant: 'destructive',
                      size: 'sm',
                    })}
                    onClick={handleDeleteFlat}
                    title="–£–¥–∞–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É"
                  >
                    <TrashIcon className="h-4 w-4" />
                  </button>
                </div>
              </div>

              {formState.isDirty ? (
                <div className='ml-auto flex items-center gap-x-4'>
                  <span className='text-muted-foreground text-xs'>
                    –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </span>

                  <div className='flex gap-x-2'>
                    <Button onClick={cancel} variant='outline'>
                      –û—Ç–º–µ–Ω–∞
                    </Button>

                    <Button
                      className='gap-x-2'
                      disabled={!formState.isValid}
                      type='submit'
                    >
                      <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>

                      {formState.isSubmitting ? (
                        <Loader2Icon className='size-4 animate-spin' />
                      ) : null}
                    </Button>
                  </div>
                </div>
              ) : null}
            </Page.Header>

            <Page.Content className='divide-y *:py-5 first:*:pt-0 last:*:pb-0'>

              {/* –ë–ª–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ (from = 1) */}
              <div className='py-4 px-4 bg-gray-50 rounded-lg mb-4'>
                <div className='flex items-center justify-between mb-4'>
                  <div
                    className='flex items-center gap-2 cursor-pointer hover:text-blue-600'
                    onClick={() => toggleBlock('flatAds')}
                  >
                    <h3 className='text-lg font-medium'>–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ</h3>
                    {isBlocksCollapsed.flatAds ? (
                      <ChevronDownIcon className='w-5 h-5' />
                    ) : (
                      <ChevronUpIcon className='w-5 h-5' />
                    )}
                  </div>
                  <div className='flex items-center gap-2'>
                    <div className='flex items-center gap-2'>
                      <button
                        type='button'
                        className={buttonVariants({
                          variant: 'default',
                          size: 'sm',
                        })}
                        disabled={isUpdatingFlatCian || isUpdatingFlatAvito || isUpdatingFlatYandex}
                        onClick={handleUpdateAllSources}
                      >
                        {(isUpdatingFlatCian || isUpdatingFlatAvito || isUpdatingFlatYandex) ? (
                          <div className='flex items-center gap-2'>
                            <svg className='w-4 h-4 animate-spin' fill='none' viewBox='0 0 24 24'>
                              <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                              <path className='opacity-75' fill='currentColor' d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                            </svg>
                            –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                          </div>
                        ) : '–û–±–Ω–æ–≤–∏—Ç—å'}
                      </button>
                      
                      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º */}
                      {(isUpdatingFlatCian || isUpdatingFlatAvito || isUpdatingFlatYandex) && (
                        <div className='flex items-center gap-3 text-sm'>
                          <div className='flex items-center gap-1'>
                            <span className='text-orange-600'>Cian:</span>
                            {isUpdatingFlatCian ? (
                              <svg className='w-3 h-3 animate-spin text-orange-600' fill='none' viewBox='0 0 24 24'>
                                <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                                <path className='opacity-75' fill='currentColor' d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                              </svg>
                            ) : (
                              <span className='text-green-600'>‚úì</span>
                            )}
                          </div>
                          <div className='flex items-center gap-1'>
                            <span className='text-blue-600'>Avito:</span>
                            {isUpdatingFlatAvito ? (
                              <svg className='w-3 h-3 animate-spin text-blue-600' fill='none' viewBox='0 0 24 24'>
                                <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                                <path className='opacity-75' fill='currentColor' d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                              </svg>
                            ) : (
                              <span className='text-green-600'>‚úì</span>
                            )}
                          </div>
                          <div className='flex items-center gap-1'>
                            <span className='text-red-600'>Yandex:</span>
                            <span className='text-gray-400'>–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω</span>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ */}
                <div className='rounded-lg border'>
                  <div className='relative w-full overflow-auto'>
                    <table className='w-full caption-bottom text-sm'>
                      <thead className='[&_tr]:border-b'>
                        <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-96'>
                            <div className='flex items-center gap-2'>
                              URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                            </div>
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            <div className='flex items-center gap-2'>
                              –¶–µ–Ω–∞
                            </div>
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            <div className='flex items-center gap-2'>
                              –°–æ–∑–¥–∞–Ω–æ
                            </div>
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            <div className='flex items-center gap-2'>
                              –û–±–Ω–æ–≤–ª–µ–Ω–æ
                            </div>
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            <div className='flex items-center gap-2'>
                              –ê–∫—Ç–∏–≤–Ω–æ
                            </div>
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            <div className='flex items-center gap-2'>
                              –ê–≤—Ç–æ—Ä
                            </div>
                          </th>
                          <th className='h-12 px-4 text-center align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            <div className='flex items-center justify-center gap-2'>
                              –°—Ä–∞–≤–Ω–∏—Ç—å
                            </div>
                          </th>
                        </tr>
                      </thead>
                      <tbody className='[&_tr:last-child]:border-0'>
                        {flatAdsFromFindAds.length === 0 ? (
                          <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                            <td className='p-4 align-middle [&:has([role=checkbox])]:pr-0' colSpan={7}>
                              <div className='text-sm text-center'>–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ</div>
                            </td>
                          </tr>
                        ) : (
                          flatAdsFromFindAds.map((findAdsItem) => {
                            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ ads –ø–æ URL –¥–ª—è –∫–Ω–æ–ø–æ–∫
                            const adsItem = ads.find(ad => ad.url === findAdsItem.url)
                            const loadButton = adsItem && (
                              <button
                                type='button'
                                className={expandedView ? 
                                  'p-1 rounded text-xs hover:bg-muted transition-colors disabled:opacity-50 disabled:cursor-not-allowed' :
                                  'p-2 rounded-md hover:bg-muted transition-colors disabled:opacity-50 disabled:cursor-not-allowed'
                                }
                                title='–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'
                                disabled={isParsing}
                                onClick={async () => {
                                  try {
                                    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', findAdsItem.url)
                                    const result = await parseProperty(findAdsItem.url)
                                    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result)
                                    
                                    if (result.success && result.data) {
                                      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result.data)
                                      
                                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                                      const updateData = prepareUpdateData(result.data)
                                      
                                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
                                      await forceUpdateAd(adsItem!.id, updateData)
                                      
                                      toast.success('–î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
                                      console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î')
                                    } else {
                                      console.error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', result.message)
                                      toast.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${result.message}`)
                                    }
                                  } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
                                    toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
                                  }
                                }}
                              >
                                {isParsing ? (
                                  <svg 
                                    className='h-4 w-4 animate-spin' 
                                    fill='none' 
                                    viewBox='0 0 24 24' 
                                    stroke='currentColor'
                                  >
                                    <path 
                                      strokeLinecap='round' 
                                      strokeLinejoin='round' 
                                      strokeWidth={2} 
                                      d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15' 
                                    />
                                  </svg>
                                ) : (
                                  <svg 
                                    className='h-4 w-4' 
                                    fill='none' 
                                    viewBox='0 0 24 24' 
                                    stroke='currentColor'
                                  >
                                    <path 
                                      strokeLinecap='round' 
                                      strokeLinejoin='round' 
                                      strokeWidth={2} 
                                      d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15' 
                                    />
                                  </svg>
                                )}
                              </button>
                            )

                            const deleteButton = adsItem && (
                              <button
                                type='button'
                                className={expandedView ? 
                                  'p-1 rounded text-xs text-red-600 hover:bg-red-50 hover:text-red-700 transition-colors' :
                                  'p-2 rounded-md text-red-600 hover:bg-red-50 hover:text-red-700 transition-colors'
                                }
                                title='–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
                                onClick={async () => {
                                  if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
                                    try {
                                      await deleteAd(adsItem!.id)
                                      // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                                      try {
                                        await refetch()
                                      } catch (err) {
                                        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ refetch –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', err)
                                      }
                                    } catch (error) {
                                      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error)
                                      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
                                    }
                                  }
                                }}
                              >
                                <TrashIcon className='h-4 w-4' />
                              </button>
                            )

                            return (
                              <tr key={findAdsItem.url} className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                                {/* URL */}
                                <td className='p-4 align-middle'>
                                  <div className='text-sm max-w-96 text-ellipsis overflow-hidden'>
                                    <a 
                                      href={findAdsItem.url} 
                                      target='_blank' 
                                      rel='noopener noreferrer'
                                      className='text-blue-600 hover:underline'
                                      title={findAdsItem.url}
                                    >
                                      {findAdsItem.url}
                                    </a>
                                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º */}
                                    <div className='flex items-center gap-1 mt-1'>
                                      {adsItem?.source === 1 && isUpdatingFlatCian && (
                                        <div className='flex items-center text-xs text-blue-600'>
                                          <svg className='w-3 h-3 animate-spin mr-1' fill='none' viewBox='0 0 24 24'>
                                            <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                                            <path className='opacity-75' fill='currentColor' d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                                          </svg>
                                          Cian
                                        </div>
                                      )}
                                      {adsItem?.source === 2 && isUpdatingFlatAvito && (
                                        <div className='flex items-center text-xs text-green-600'>
                                          <svg className='w-3 h-3 animate-spin mr-1' fill='none' viewBox='0 0 24 24'>
                                            <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                                            <path className='opacity-75' fill='currentColor' d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                                          </svg>
                                          Avito
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </td>
                                {/* –¶–µ–Ω–∞ */}
                                <td className='p-4 align-middle text-sm'>
                                  {findAdsItem.price > 0 ? `${findAdsItem.price.toLocaleString()} ‚ÇΩ` : '-'}
                                </td>
                                {/* –°–æ–∑–¥–∞–Ω–æ */}
                                <td className='p-4 align-middle text-sm'>
                                  {findAdsItem.created ? new Date(findAdsItem.created).toLocaleDateString('ru-RU') : '-'}
                                </td>
                                {/* –û–±–Ω–æ–≤–ª–µ–Ω–æ */}
                                <td className='p-4 align-middle text-sm'>
                                  {adsItem?.updatedAt ? new Date(adsItem.updatedAt).toLocaleDateString('ru-RU') : 
                                   (findAdsItem.updated ? new Date(findAdsItem.updated).toLocaleDateString('ru-RU') : '-')}
                                </td>
                                {/* –ê–∫—Ç–∏–≤–Ω–æ */}
                                <td className='p-4 align-middle text-sm'>
                                  {findAdsItem.is_active ? (
                                    <svg className="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                    </svg>
                                  ) : (
                                    <span className="px-2 py-1 rounded text-xs bg-red-100 text-red-800">
                                      –ù–µ–∞–∫—Ç–∏–≤–Ω–æ
                                    </span>
                                  )}
                                </td>
                                {/* –¢–∏–ø –ª–∏—Ü–∞ (person_type) */}
                                <td className='p-4 align-middle text-sm'>
                                  {findAdsItem.person_type || '-'}
                                </td>
                                {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ */}
                                <td className='p-4 align-middle text-sm text-center'>
                                  {(() => {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º URL –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
                                    const isInComparison = ads.some(ad => ad.url === findAdsItem.url && ad.sma === 1)
                                    return (
                                      <button
                                        type='button'
                                        onClick={() => handleAddToComparison(findAdsItem)}
                                        disabled={isInComparison}
                                        className={`inline-flex items-center justify-center w-8 h-8 rounded-full transition-colors ${
                                          isInComparison
                                            ? 'bg-green-100 text-green-600 cursor-not-allowed'
                                            : 'bg-blue-100 hover:bg-blue-200 text-blue-600'
                                        }`}
                                        title={isInComparison ? '–£–∂–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏' : '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'}
                                      >
                                        {isInComparison ? (
                                          <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
                                            <path fillRule='evenodd' d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z' clipRule='evenodd' />
                                          </svg>
                                        ) : (
                                          <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
                                            <path fillRule='evenodd' d='M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z' clipRule='evenodd' />
                                          </svg>
                                        )}
                                      </button>
                                    )
                                  })()}
                                </td>
                              </tr>
                            )
                          })
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>


              {/* –ë–ª–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π */}
              {/* –ë–ª–æ–∫ –¥—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (from = 2) */}
              <div className='py-4 px-4 bg-gray-50 rounded-lg mb-4'>
                <div className='flex items-center justify-between mb-4'>
                  <h3 className='text-lg font-medium'>–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –¥–æ–º—É</h3>
                  <div className='flex items-center gap-2'>
                    <button
                      type='button'
                      className={buttonVariants({
                        variant: 'default',
                        size: 'sm',
                      })}
                      disabled={isUpdatingHouseCian || isUpdatingHouseAvito || isUpdatingHouseYandex}
                      onClick={() => handleUpdateHouseAds()}
                    >
                      {(isUpdatingHouseCian || isUpdatingHouseAvito || isUpdatingHouseYandex) ? (
                        <div className='flex items-center gap-2'>
                          <svg className='w-4 h-4 animate-spin' fill='none' viewBox='0 0 24 24'>
                            <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                            <path className='opacity-75' fill='currentColor' d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                          </svg>
                          –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                        </div>
                      ) : '–û–±–Ω–æ–≤–∏—Ç—å'}
                    </button>
                    <button
                      type='button'
                      className={buttonVariants({
                        variant: 'outline',
                        size: 'sm',
                      })}
                      disabled={isLoadingSimilar}
                      onClick={autoFindBroaderAds}
                    >
                      {isLoadingSimilar ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É'}
                    </button>
                  </div>
                </div>

                {/* –¢–∞–±–ª–∏—Ü–∞ –¥—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π */}
                <div className='rounded-lg border'>
                  <div className='relative w-full overflow-auto'>
                    <table className='w-full caption-bottom text-sm'>
                      <thead className='[&_tr]:border-b'>
                        <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            URL
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –¶–µ–Ω–∞, –º–ª–Ω
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –ö–æ–º–Ω–∞—Ç
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –≠—Ç–∞–∂
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –°–æ–∑–¥–∞–Ω–æ
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –û–±–Ω–æ–≤–ª–µ–Ω–æ
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –ê–≤—Ç–æ—Ä
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –ê–∫—Ç–∏–≤–Ω–æ
                          </th>
                          <th className='h-12 px-4 text-center align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-12'>
                            –°—Ä–∞–≤–Ω–∏—Ç—å
                          </th>
                        </tr>
                      </thead>
                      <tbody className='[&_tr:last-child]:border-0'>
                        {groupedBroaderAds.length === 0 ? (
                          <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                            <td className='p-4 align-middle [&:has([role=checkbox])]:pr-0' colSpan={9}>
                              <div className='text-sm text-center'>–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É –¥–æ–º—É</div>
                            </td>
                          </tr>
                        ) : (
                          groupedBroaderAds.map((findAdsItem) => {
                            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ –±–µ–∑ .ru
                            const getDomainFromUrl = (url: string) => {
                              try {
                                const urlObj = new URL(url)
                                const hostnameParts = urlObj.hostname.split('.')
                                if (hostnameParts.length >= 2) {
                                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –±–µ–∑ .ru (cian, avito, yandex)
                                  return hostnameParts[hostnameParts.length - 2]
                                }
                                return urlObj.hostname
                              } catch {
                                return url
                              }
                            }

                            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö
                            const formatPriceInMillions = (price: number) => {
                              return (price / 1000000).toFixed(1)
                            }

                            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
                            const formatDate = (dateStr: string) => {
                              return new Date(dateStr).toLocaleDateString('ru-RU', {
                                day: '2-digit',
                                month: '2-digit',
                                year: 'numeric'
                              })
                            }

                            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ ads –ø–æ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                            const adsItem = ads.find(ad => ad.url === findAdsItem.url)
                            const deleteButton = adsItem && (
                              <button
                                type='button'
                                onClick={() => handleDeleteAd(adsItem.id)}
                                className='p-1 rounded text-red-600 hover:bg-red-50 transition-colors'
                                title='–£–¥–∞–ª–∏—Ç—å'
                              >
                                <TrashIcon className='h-4 w-4' />
                              </button>
                            )

                            return (
                              <tr
                                key={findAdsItem.url}
                                className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'
                              >
                                <td className='p-2 align-middle text-sm'>
                                  <a
                                    href={findAdsItem.url}
                                    target='_blank'
                                    rel='noopener noreferrer'
                                    className='text-blue-600 hover:underline'
                                  >
                                    {getDomainFromUrl(findAdsItem.url)}
                                  </a>
                                </td>
                                <td className='p-2 align-middle text-sm'>{formatPriceInMillions(findAdsItem.price)}</td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.rooms}</td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.floor || '-'}</td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.created ? formatDate(findAdsItem.created) : '-'}</td>
                                <td className='p-2 align-middle text-sm'>
                                  {adsItem?.updatedAt ? formatDate(adsItem.updatedAt) : 
                                   (findAdsItem.updated ? formatDate(findAdsItem.updated) : '-')}
                                </td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.person_type || '-'}</td>
                                <td className='p-2 align-middle text-sm'>
                                  {findAdsItem.is_active ? (
                                    <svg className="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                    </svg>
                                  ) : (
                                    <span className="px-2 py-1 rounded text-xs bg-red-100 text-red-800">
                                      –ù–µ–∞–∫—Ç–∏–≤–Ω–æ
                                    </span>
                                  )}
                                </td>
                                <td className='p-2 align-middle text-sm text-center'>
                                  {(() => {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º URL –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
                                    const isInComparison = ads.some(ad => ad.url === findAdsItem.url && ad.sma === 1)
                                    return (
                                      <button
                                        type='button'
                                        onClick={() => handleAddToComparison(findAdsItem)}
                                        disabled={isInComparison}
                                        className={`inline-flex items-center justify-center w-8 h-8 rounded-full transition-colors ${
                                          isInComparison
                                            ? 'bg-green-100 text-green-600 cursor-not-allowed'
                                            : 'bg-blue-100 hover:bg-blue-200 text-blue-600'
                                        }`}
                                        title={isInComparison ? '–£–∂–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏' : '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'}
                                      >
                                        {isInComparison ? (
                                          <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
                                            <path fillRule='evenodd' d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z' clipRule='evenodd' />
                                          </svg>
                                        ) : (
                                          <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
                                            <path fillRule='evenodd' d='M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z' clipRule='evenodd' />
                                          </svg>
                                        )}
                                      </button>
                                    )
                                  })()}
                                </td>
                              </tr>
                            )
                          })
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>

              {/* –ë–ª–æ–∫ –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 500–º */}
              <div className='py-4 px-4 bg-gray-50 rounded-lg mb-4'>
                <div className='flex items-center justify-between mb-4'>
                  <h3 className='text-lg font-medium'>–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 500–º –∏ –¥–µ—à–µ–≤–ª–µ</h3>
                  <button
                    type="button"
                    onClick={async () => {
                      if (!flat) return
                      try {
                        await refetchNearbyAds()
                        toast.success('–î–∞–Ω–Ω—ã–µ –æ –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                      } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error)
                        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
                      }
                    }}
                    disabled={isLoadingNearbyAds}
                    className={buttonVariants({
                      variant: 'outline',
                      size: 'sm',
                    })}
                  >
                    {isLoadingNearbyAds ? '–ü–æ–∏—Å–∫...' : '–ò—Å–∫–∞—Ç—å –µ—â–µ'}
                  </button>
                </div>

                <div className='overflow-hidden rounded-md border border-gray-200'>
                  <div className='relative w-full overflow-auto'>
                    <table className='w-full caption-bottom text-sm'>
                      <thead className='[&_tr]:border-b'>
                        <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –°–∞–π—Ç
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –¶–µ–Ω–∞, –º–ª–Ω
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –ö–æ–º–Ω–∞—Ç
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –≠—Ç–∞–∂
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –º
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –°–æ–∑–¥–∞–Ω–æ
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –û–±–Ω–æ–≤–ª–µ–Ω–æ
                          </th>
                          <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                            –ê–≤—Ç–æ—Ä
                          </th>
                          <th className='h-12 px-4 text-center align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-12'>
                            –°—Ä–∞–≤–Ω–∏—Ç—å
                          </th>
                        </tr>
                      </thead>
                      <tbody className='[&_tr:last-child]:border-0'>
                        {nearbyAdsFromFindAds.length === 0 ? (
                          <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                            <td className='p-4 align-middle [&:has([role=checkbox])]:pr-0' colSpan={9}>
                              <div className='text-sm text-center'>–ù–µ—Ç –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>
                            </td>
                          </tr>
                        ) : (
                          nearbyAdsFromFindAds.map((findAdsItem, index) => {
                            const formatDate = (dateStr: string | Date) => {
                              if (!dateStr) return '-'
                              const date = typeof dateStr === 'string' ? new Date(dateStr) : dateStr
                              return date.toLocaleDateString('ru-RU')
                            }

                            const getDomainFromUrl = (url: string) => {
                              if (url.includes('cian.ru')) return 'cian'
                              if (url.includes('avito.ru')) return 'avito'
                              if (url.includes('yandex.ru') || url.includes('realty.ya.ru')) return 'yandex'
                              return '–¥—Ä—É–≥–æ–µ'
                            }

                            return (
                              <tr key={`${findAdsItem.url}-${index}`} className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                                <td className='p-2 align-middle text-sm'>
                                  <a href={findAdsItem.url} target='_blank' rel='noopener noreferrer' className='text-blue-600 hover:underline'>
                                    {getDomainFromUrl(findAdsItem.url)}
                                  </a>
                                </td>
                                <td className='p-2 align-middle text-sm'>{(findAdsItem.price / 1000000).toFixed(2)}</td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.rooms}</td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.floor || '-'}</td>
                                <td className='p-2 align-middle text-sm'>{(findAdsItem as any).distance_m || '-'}</td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.created ? formatDate(findAdsItem.created) : '-'}</td>
                                <td className='p-2 align-middle text-sm'>
                                  {findAdsItem.updated ? formatDate(findAdsItem.updated) : '-'}
                                </td>
                                <td className='p-2 align-middle text-sm'>{findAdsItem.person_type || '-'}</td>
                                <td className='p-2 align-middle text-sm text-center'>
                                  {(() => {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º URL –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
                                    const isInComparison = ads.some(ad => ad.url === findAdsItem.url && ad.sma === 1)
                                    return (
                                      <button
                                        type='button'
                                        onClick={() => handleAddToComparison(findAdsItem)}
                                        disabled={isInComparison}
                                        className={`inline-flex items-center justify-center w-8 h-8 rounded-full transition-colors ${
                                          isInComparison
                                            ? 'bg-green-100 text-green-600 cursor-not-allowed'
                                            : 'bg-blue-100 hover:bg-blue-200 text-blue-600'
                                        }`}
                                        title={isInComparison ? '–£–∂–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏' : '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'}
                                      >
                                        {isInComparison ? (
                                          <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
                                            <path fillRule='evenodd' d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z' clipRule='evenodd' />
                                          </svg>
                                        ) : (
                                          <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
                                            <path fillRule='evenodd' d='M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z' clipRule='evenodd' />
                                          </svg>
                                        )}
                                      </button>
                                    )
                                  })()}
                                </td>
                              </tr>
                            )
                          })
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>

              {/* –ë–ª–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä (sma = 1) */}
              <div className='py-4 px-4 bg-gray-50 rounded-lg mb-4'>
                <div className='flex items-center justify-between mb-4'>
                  <div className='flex items-center gap-3'>
                    <h3 className='text-lg font-medium'>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä</h3>
                    <button
                      type='button'
                      className={buttonVariants({
                        variant: expandedView ? 'default' : 'outline',
                        size: 'sm',
                      })}
                      onClick={() => setExpandedView(!expandedView)}
                    >
                      {expandedView ? '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥' : '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–∏–¥'}
                    </button>
                  </div>
                  <div className='flex items-center gap-2'>
                    <button
                      type='button'
                      className={buttonVariants({
                        variant: 'outline',
                        size: 'sm',
                      })}
                      onClick={exportComparisonToExcel}
                      disabled={comparisonAds.length === 0}
                    >
                      <DownloadIcon className='h-4 w-4 mr-2' />
                      –≠–∫—Å–ø–æ—Ä—Ç Excel
                    </button>
                    <button
                      type='button'
                      className={buttonVariants({
                        variant: 'default',
                        size: 'sm',
                      })}
                      disabled={isUpdatingComparisonCian || isUpdatingComparisonAvito || isUpdatingComparisonYandex}
                      onClick={handleUpdateComparisonAds}
                    >
                      {(isUpdatingComparisonCian || isUpdatingComparisonAvito || isUpdatingComparisonYandex) ? (
                        <div className='flex items-center gap-2'>
                          <svg className='w-4 h-4 animate-spin' fill='none' viewBox='0 0 24 24'>
                            <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4'></circle>
                            <path className='opacity-75' fill='currentColor' d='m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
                          </svg>
                          –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                        </div>
                      ) : '–û–±–Ω–æ–≤–∏—Ç—å'}
                    </button>
                    <button
                      type='button'
                      className={buttonVariants({
                        variant: 'secondary',
                        size: 'sm',
                      })}
                      onClick={() => {
                        setShowAddAdForm(!showAddAdForm)
                      }}
                    >
                      {showAddAdForm ? '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'}
                    </button>
                  </div>
                </div>

                {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è */}
                {showAddAdForm && flat && (
                  <div className='mb-6 p-4 border rounded-lg bg-muted/50'>
                    <h4 className='text-md font-medium mb-4'>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</h4>
                    <AddAdForm 
                      flatId={flat.id}
                      flatAddress={flat.address}
                      flatRooms={flat.rooms}
                      onSuccess={() => {
                        setShowAddAdForm(false)
                      }}
                    />
                  </div>
                )}
                
                {/* –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
                <div className='rounded-lg border'>
                  <div className='relative w-full overflow-auto'>
                    <table className='w-full caption-bottom text-sm'>
                      <thead className='[&_tr]:border-b'>
                        <tr className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'>
                          {mounted && expandedView ? (
                            <>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-40'>
                                URL
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –¶–µ–Ω–∞
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ö–æ–º–Ω–∞—Ç—ã
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –û–±—â–∞—è –ø–ª.
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ñ–∏–ª–∞—è –ø–ª.
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ö—É—Ö–Ω—è –ø–ª.
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –≠—Ç–∞–∂
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –°–∞–Ω—É–∑–µ–ª
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ë–∞–ª–∫–æ–Ω
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –†–µ–º–æ–Ω—Ç
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ú–µ–±–µ–ª—å
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ì–æ–¥
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –¢–∏–ø –¥–æ–º–∞
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –ú–µ—Ç—Ä–æ
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –¢–µ–≥–∏
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –û–ø–∏—Å–∞–Ω–∏–µ
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –°—Ç–∞—Ç—É—Å
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                <div className='flex items-center gap-1'>
                                  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –¥–∞—Ç—É
                                  <AdChangesHistory 
                                    adId={comparisonAds.map(ad => ad.id)}
                                    trigger="hover"
                                    chartType="views"
                                  />
                                </div>
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-32'>
                                –î–µ–π—Å—Ç–≤–∏—è
                              </th>
                            </>
                          ) : (
                            <>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-96'>
                                <div className='flex items-center gap-2'>
                                  URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                                </div>
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –¶–µ–Ω–∞
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                <div className='flex items-center gap-1'>
                                  –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –¥–∞—Ç—É
                                  <AdChangesHistory 
                                    adId={comparisonAds.map(ad => ad.id)}
                                    trigger="hover"
                                    chartType="views"
                                  />
                                </div>
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –°—Ç–∞—Ç—É—Å
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0'>
                                –û–±–Ω–æ–≤–ª–µ–Ω–æ
                              </th>
                              <th className='h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 w-32'>
                                –î–µ–π—Å—Ç–≤–∏—è
                              </th>
                            </>
                          )}
                        </tr>
                      </thead>
                      <tbody className='[&_tr:last-child]:border-0'>
                        {comparisonAds.map((ad) => {
                          const isUpdating = updatingAdIds.has(ad.id)
                          
                          const refreshButton = (
                            <button
                              type='button'
                              onClick={() => handleRefreshSingleAd(ad)}
                              disabled={isUpdating}
                              className='p-1 rounded text-blue-600 hover:bg-blue-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'
                              title='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'
                            >
                              <RefreshCwIcon className={`h-4 w-4 ${isUpdating ? 'animate-spin' : ''}`} />
                            </button>
                          )

                          const deleteButton = (
                            <button
                              type='button'
                              onClick={() => handleDeleteAd(ad.id)}
                              className='p-1 rounded text-red-600 hover:bg-red-50 transition-colors'
                              title='–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
                            >
                              <TrashIcon className='h-4 w-4' />
                            </button>
                          )

                          return (
                            <tr
                              key={ad.id}
                              className='border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted'
                            >
                              {mounted && expandedView ? (
                                <>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='max-w-40 text-ellipsis overflow-hidden'>
                                      <a
                                        href={ad.url}
                                        target='_blank'
                                        rel='noopener noreferrer'
                                        className='text-blue-600 hover:underline'
                                      >
                                        {ad.url}
                                      </a>
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex items-center gap-1'>
                                      <span>{formatPrice(ad.price)}</span>
                                      <AdChangesHistory 
                                        adId={ad.id}
                                        currentPrice={ad.price}
                                        trigger="hover"
                                        chartType="price"
                                      />
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>{ad.rooms}</td>
                                  <td className='p-2 align-middle text-sm'>{formatArea(ad.totalArea)}</td>
                                  <td className='p-2 align-middle text-sm'>{formatArea(ad.livingArea)}</td>
                                  <td className='p-2 align-middle text-sm'>{formatArea(ad.kitchenArea)}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.floor || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.totalFloors || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.bathroom || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.balcony || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.renovation || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.furniture || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.constructionYear || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.houseType || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.ceilingHeight || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.metroStation || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.metroTime || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.tags || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.description || ''}</td>
                                  <td className='p-2 align-middle text-sm'>{ad.status || ''}</td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex items-center gap-1'>
                                      <span>{ad.viewsToday !== null && ad.viewsToday !== undefined ? ad.viewsToday : '‚Äî'}</span>
                                      <AdChangesHistory 
                                        adId={ad.id}
                                        currentViewsToday={ad.viewsToday}
                                        trigger="hover"
                                        chartType="views"
                                      />
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex gap-2'>
                                      {refreshButton}
                                      {deleteButton}
                                    </div>
                                  </td>
                                </>
                              ) : (
                                <>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='max-w-96 text-ellipsis overflow-hidden'>
                                      <a
                                        href={ad.url}
                                        target='_blank'
                                        rel='noopener noreferrer'
                                        className='text-blue-600 hover:underline'
                                      >
                                        {ad.url}
                                      </a>
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex items-center gap-1'>
                                      <span>{formatPrice(ad.price)}</span>
                                      <AdChangesHistory 
                                        adId={ad.id}
                                        currentPrice={ad.price}
                                        trigger="click"
                                        chartType="price"
                                      />
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex items-center gap-1'>
                                      <span>{ad.viewsToday !== null && ad.viewsToday !== undefined ? ad.viewsToday : '‚Äî'}</span>
                                      <AdChangesHistory 
                                        adId={ad.id}
                                        currentViewsToday={ad.viewsToday}
                                        trigger="click"
                                        chartType="views"
                                      />
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex items-center justify-center'>
                                      {ad.status ? (
                                        <span className='text-green-600'>‚úì</span>
                                      ) : (
                                        <span className='text-gray-400'>‚àí</span>
                                      )}
                                    </div>
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    {new Date(ad.updatedAt).toLocaleDateString('ru-RU')}
                                  </td>
                                  <td className='p-2 align-middle text-sm'>
                                    <div className='flex gap-2'>
                                      {refreshButton}
                                      {deleteButton}
                                    </div>
                                  </td>
                                </>
                              )}
                            </tr>
                          )
                        })}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div> 
            </Page.Content>
          </Page>
        </form>
        </Form>
      </>
    )
  }
