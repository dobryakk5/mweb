'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { useRouter } from 'next/navigation'

import { insertAdSchema } from '@acme/db/schemas'
import { useCreateAd, forceUpdateAd } from '@/domains/ads'
import { useParseProperty } from '@/domains/property-parser'
import { buttonVariants } from '@acme/ui/components/button'
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from '@acme/ui/components/form'
import { Input } from '@acme/ui/components/input'
import { toast } from 'sonner'

type FormData = {
  url: string
}

interface AddAdFormProps {
  flatId: number
  flatAddress: string
  flatRooms: number
  onSuccess?: () => void
}

export default function AddAdForm({ flatId, flatAddress, flatRooms, onSuccess }: AddAdFormProps) {
  const router = useRouter()
  const createAd = useCreateAd()
  const parseProperty = useParseProperty()

  const form = useForm<FormData>({
    resolver: zodResolver(z.object({
      url: z.string().url(),
    })),
    defaultValues: {
      url: '',
    },
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ URL
  const handleUrlChange = async (value: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL
    try {
      new URL(value)
      // –ï—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      await onSubmit({ url: value })
    } catch {
      // –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π URL, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä—Å–∏–Ω–≥–∞
  const prepareUpdateData = (parsedData: any) => {
    const updateData: any = {
      status: parsedData.status || 'active',
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if (typeof parsedData.price === 'number' && parsedData.price > 0) {
      updateData.price = parsedData.price
    } else if (typeof parsedData.price === 'string' && parsedData.price !== '–ù–µ –Ω–∞–π–¥–µ–Ω–æ') {
      const parsedPrice = parseInt(parsedData.price)
      if (!isNaN(parsedPrice) && parsedPrice > 0) {
        updateData.price = parsedPrice
      }
    }

    if (typeof parsedData.rooms === 'number' && parsedData.rooms > 0) {
      updateData.rooms = parsedData.rooms
    } else if (parsedData.rooms) {
      const parsedRooms = parseInt(String(parsedData.rooms))
      if (!isNaN(parsedRooms) && parsedRooms > 0) {
        updateData.rooms = parsedRooms
      }
    }

    // –ü–ª–æ—â–∞–¥–∏
    if (parsedData.total_area || parsedData.totalArea) {
      const area = parsedData.total_area || parsedData.totalArea
      updateData.totalArea = typeof area === 'number' ? area : parseFloat(String(area))
    }
    
    if (parsedData.living_area || parsedData.livingArea) {
      const area = parsedData.living_area || parsedData.livingArea
      updateData.livingArea = typeof area === 'number' ? area : parseFloat(String(area))
    }
    
    if (parsedData.kitchen_area || parsedData.kitchenArea) {
      const area = parsedData.kitchen_area || parsedData.kitchenArea
      updateData.kitchenArea = typeof area === 'number' ? area : parseFloat(String(area))
    }

    // –≠—Ç–∞–∂ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞
    if (typeof parsedData.floor === 'number' && parsedData.floor > 0) {
      updateData.floor = parsedData.floor
    } else if (parsedData.floor) {
      const parsedFloor = parseInt(String(parsedData.floor))
      if (!isNaN(parsedFloor) && parsedFloor > 0) {
        updateData.floor = parsedFloor
      }
    }

    if (typeof parsedData.total_floors === 'number' || typeof parsedData.totalFloors === 'number') {
      updateData.totalFloors = parsedData.total_floors || parsedData.totalFloors
    }

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    if (parsedData.bathroom) updateData.bathroom = parsedData.bathroom
    if (parsedData.balcony) updateData.balcony = parsedData.balcony
    if (parsedData.renovation) updateData.renovation = parsedData.renovation
    if (parsedData.furniture) updateData.furniture = parsedData.furniture

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–¥–∞–Ω–∏—è
    if (parsedData.construction_year || parsedData.constructionYear) {
      const year = parsedData.construction_year || parsedData.constructionYear
      updateData.constructionYear = typeof year === 'number' ? year : parseInt(String(year))
    }
    
    if (parsedData.house_type || parsedData.houseType) {
      updateData.houseType = parsedData.house_type || parsedData.houseType
    }
    
    if (parsedData.ceiling_height || parsedData.ceilingHeight) {
      const height = parsedData.ceiling_height || parsedData.ceilingHeight
      updateData.ceilingHeight = typeof height === 'number' ? height : parseFloat(String(height))
    }

    // –õ–æ–∫–∞—Ü–∏—è
    if (parsedData.metro_station || parsedData.metroStation) {
      updateData.metroStation = parsedData.metro_station || parsedData.metroStation
    }
    
    if (parsedData.metro_time || parsedData.metroTime) {
      updateData.metroTime = parsedData.metro_time || parsedData.metroTime
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (parsedData.tags) updateData.tags = parsedData.tags
    if (parsedData.description) updateData.description = parsedData.description
    if (parsedData.photo_urls || parsedData.photoUrls) {
      updateData.photoUrls = parsedData.photo_urls || parsedData.photoUrls
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (parsedData.source) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —á–∏—Å–ª–æ–≤—ã–µ –¥–ª—è API
      if (parsedData.source === 'cian') {
        updateData.source = 1
      } else if (parsedData.source === 'avito') {
        updateData.source = 2
      } else if (typeof parsedData.source === 'number') {
        updateData.source = parsedData.source
      }
    }
    
    if (parsedData.views_today || parsedData.viewsToday) {
      const views = parsedData.views_today || parsedData.viewsToday
      updateData.viewsToday = typeof views === 'number' ? views : parseInt(String(views))
    }
    
    if (parsedData.total_views || parsedData.totalViews) {
      const views = parsedData.total_views || parsedData.totalViews
      updateData.totalViews = typeof views === 'number' ? views : parseInt(String(views))
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
    return Object.fromEntries(
      Object.entries(updateData).filter(([_, value]) => value !== undefined && value !== null && value !== '')
    )
  }

  const onSubmit = async (data: FormData) => {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const createdAd = await createAd.mutateAsync({
        flatId: flatId, // ID –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        url: data.url,
        address: flatAddress, // –ë–µ—Ä–µ–º –∏–∑ –ø—Ä–æ–ø—Å–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        price: 0, // –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º —Ü–µ–Ω—É
        rooms: 1, // –ü–æ–∫–∞ —Å—Ç–∞–≤–∏–º 1, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
        sma: 1, // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å–∞–π—Ç–æ–º Cian –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥
      const isCianUrl = data.url.toLowerCase().includes('cian.ru')
      
      if (isCianUrl && createdAd) {
        try {
          console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ Cian –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${data.url}`)
          const parseResult = await parseProperty.mutateAsync(data.url)
          
          if (parseResult.success && parseResult.data) {
            const updateData = prepareUpdateData(parseResult.data)
            
            await forceUpdateAd(createdAd.id, updateData)
            console.log(`‚úÖ Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${createdAd.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`)
            toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å Cian!')
          } else {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∞—Ä—Å–∏—Ç—å Cian –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${data.url}`)
            toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ)')
          }
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseError)
          toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ)')
        }
      } else {
        toast.success('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ!')
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
      form.reset()
      onSuccess?.()
    } catch (error) {
      console.error('Error creating ad:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    }
  }

  return (
    <div className='space-y-4'>
      <FormField
        control={form.control}
        name='url'
        render={({ field }) => (
          <FormItem>
            <FormLabel>URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è</FormLabel>
            <FormControl>
              <Input 
                type='url' 
                placeholder='https://...' 
                {...field}
                onPaste={(e) => {
                  // –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                  const pastedText = e.clipboardData.getData('text')
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—ã
                  field.onChange(pastedText)
                  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                  setTimeout(() => handleUrlChange(pastedText), 100)
                }}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault()
                    form.handleSubmit(onSubmit)()
                  }
                }}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <div className='flex gap-2'>
        <button
          type='button'
          onClick={form.handleSubmit(onSubmit)}
          disabled={createAd.isPending}
          className={buttonVariants()}
        >
          {createAd.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}
        </button>
        
        <button
          type='button'
          onClick={() => form.reset()}
          className={buttonVariants({ variant: 'outline' })}
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>
    </div>
  )
}
